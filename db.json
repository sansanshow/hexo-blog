{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/sidebar-avatar.jpeg","path":"images/sidebar-avatar.jpeg","modified":0,"renderable":0},{"_id":"source/images/home-bg-o.jpg","path":"images/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"source/images/one.png","path":"images/one.png","modified":0,"renderable":0},{"_id":"source/images/post-bg-default.jpg","path":"images/post-bg-default.jpg","modified":0,"renderable":0},{"_id":"source/images/post-bg-github-cup.jpg","path":"images/post-bg-github-cup.jpg","modified":0,"renderable":0},{"_id":"source/images/post-bg-index-default.jpg","path":"images/post-bg-index-default.jpg","modified":0,"renderable":0},{"_id":"source/images/post-bg-universe.jpg","path":"images/post-bg-universe.jpg","modified":0,"renderable":0},{"_id":"source/images/15/15-1.png","path":"images/15/15-1.png","modified":0,"renderable":0},{"_id":"source/images/15/15-2.png","path":"images/15/15-2.png","modified":0,"renderable":0},{"_id":"source/images/18/18-1.png","path":"images/18/18-1.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/images/12/webCache3.png","path":"images/12/webCache3.png","modified":0,"renderable":0},{"_id":"source/images/home-bg.jpg","path":"images/home-bg.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/images/1/style.png","path":"images/1/style.png","modified":0,"renderable":0},{"_id":"source/images/12/webCache4.png","path":"images/12/webCache4.png","modified":0,"renderable":0},{"_id":"source/images/12/webCache2.png","path":"images/12/webCache2.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-Anisina/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/images/1/test.png","path":"images/1/test.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"62f711a2236519707b3bbd562ee519ce0b152b53","modified":1536759883961},{"_id":"source/CNAME","hash":"f09518cca7b34afbe26a343ee341c127e6d8fbaa","modified":1537018435159},{"_id":"themes/hexo-theme-Anisina/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1536758713821},{"_id":"themes/hexo-theme-Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1536758613310},{"_id":"themes/hexo-theme-Anisina/README.md","hash":"69a70e00c02bf563d425c8bcaf0b301a0eed5aa6","modified":1537020852807},{"_id":"themes/hexo-theme-Anisina/_config.yml","hash":"2b281d7c7065b060c39379bbb3dc94e178d8a726","modified":1537020879555},{"_id":"themes/hexo-theme-Anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1536758613327},{"_id":"source/_data/menu.yml","hash":"682bf0a595b50a5155497612e5e999c7b5eb707b","modified":1537018435160},{"_id":"source/_posts/JS控制CSS3，添加浏览器兼容前缀.md","hash":"da4243a5752c83dde73b1c829f2d1be2a86fde1d","modified":1537058105543},{"_id":"source/_posts/PC端JS打开摄像头并拍照.md","hash":"0fe0456335f8dd3897aa91a53ae7e2f8c7eadc32","modified":1537058105544},{"_id":"source/_posts/sessionStorage移动端兼容问题.md","hash":"b41d9fbffe898d852801b4d37bd7bef6f75574e5","modified":1537058105544},{"_id":"source/_posts/window-requestAnimationFrame使用.md","hash":"cf1fc6a49510630e3b87b4463bdb4d9615f7acc5","modified":1537058105545},{"_id":"source/_posts/实现跨域请求的几种方式.md","hash":"eede1137a86a88a7c3db6c8e2be3fde0250f28e9","modified":1537058105546},{"_id":"source/images/avatar.jpg","hash":"060fd52312c619ce1c1dfee972100f9ebc0c5334","modified":1537018435172},{"_id":"source/images/sidebar-avatar.jpeg","hash":"d111258d765ace3bed65667e635efb5cdd0d183b","modified":1537018435182},{"_id":"source/my/index.md","hash":"2e7a1c1bdce1646c541206a508b083da79616ccd","modified":1537075364078},{"_id":"source/tags/index.md","hash":"dac35dd15c1e59e3d5f5d631d4832bf72093de58","modified":1537022988131},{"_id":"themes/hexo-theme-Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1536758613323},{"_id":"themes/hexo-theme-Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1536758613323},{"_id":"themes/hexo-theme-Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1536758613323},{"_id":"themes/hexo-theme-Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1536758613323},{"_id":"themes/hexo-theme-Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1536758613323},{"_id":"themes/hexo-theme-Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1536758613323},{"_id":"themes/hexo-theme-Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1536758613324},{"_id":"themes/hexo-theme-Anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1536758613324},{"_id":"themes/hexo-theme-Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1536758613324},{"_id":"themes/hexo-theme-Anisina/layout/.DS_Store","hash":"fd623c7cbe0d8fd902f6ca242127fd8db7da6c18","modified":1536758613324},{"_id":"themes/hexo-theme-Anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1536758613324},{"_id":"themes/hexo-theme-Anisina/layout/index.ejs","hash":"d0d21a63071b2b7cc06d632e7fe248bee667edc6","modified":1537018435184},{"_id":"themes/hexo-theme-Anisina/layout/layout.ejs","hash":"b728827bf3ec55baf96a882032397e6c74c65f34","modified":1537060458860},{"_id":"themes/hexo-theme-Anisina/layout/page.ejs","hash":"e9990327469aa94a98a3dae92bdc9326a5b99c8a","modified":1537063132529},{"_id":"themes/hexo-theme-Anisina/layout/poetry.ejs","hash":"f6a6bffc0d943d19f6962f2ec5b18d57bce8c641","modified":1537058769854},{"_id":"themes/hexo-theme-Anisina/layout/post.ejs","hash":"131035f99a60011355d3700edcb868828c8b501d","modified":1537058791054},{"_id":"themes/hexo-theme-Anisina/layout/resume.ejs","hash":"fd06d2f53a39a4cbf5c8458d0ee733bfa3b163c1","modified":1537078141889},{"_id":"themes/hexo-theme-Anisina/layout/tags.ejs","hash":"a5b73e70540e12532aa92f12609b3a937a8bc28b","modified":1536758613326},{"_id":"themes/hexo-theme-Anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1537023558504},{"_id":"source/images/home-bg-o.jpg","hash":"fc4bdf7fa98346ea35115151e4914cd1e5a946d9","modified":1537018435173},{"_id":"source/images/one.png","hash":"31b918daa10569ad450886576b0b27d2dcd12cb0","modified":1537018435177},{"_id":"source/images/post-bg-default.jpg","hash":"6bbe3de397f929a7ca0a49c88779a4a8dd904a88","modified":1537018435178},{"_id":"source/images/post-bg-github-cup.jpg","hash":"c5a7baaddbf0249598dcdad0ac35b16c7dc0cfbe","modified":1537018435180},{"_id":"source/images/post-bg-index-default.jpg","hash":"fb4c2386d7463a289d1b0e63798ecba71bda1735","modified":1537018435181},{"_id":"source/images/post-bg-universe.jpg","hash":"eaf5940a86ae49122fbfaa02be1f8d236775b6e0","modified":1537018435182},{"_id":"source/images/15/15-1.png","hash":"9e9c7f1401910dda4a7d73bc4b53b493beccd8ab","modified":1537018435171},{"_id":"source/images/15/15-2.png","hash":"a32e88379cc250e918ca2d0a1d2285c0046cf166","modified":1537018435172},{"_id":"source/images/18/18-1.png","hash":"2f1c343661d46504ff4f8b3e30fb43abc7f7bc94","modified":1537018435172},{"_id":"themes/hexo-theme-Anisina/layout/_partial/footer.ejs","hash":"de567587f17936b27e7b8a04b5db89d98743deea","modified":1537020777154},{"_id":"themes/hexo-theme-Anisina/layout/_partial/head.ejs","hash":"4e0d96cac503d4e3a5b254d8b8175c392971ce38","modified":1536758613325},{"_id":"themes/hexo-theme-Anisina/layout/_partial/nav.ejs","hash":"b276d826b8ef2e8676940ca5e26b401ea41c2280","modified":1537077315917},{"_id":"themes/hexo-theme-Anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1536758613325},{"_id":"themes/hexo-theme-Anisina/source/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1537020719632},{"_id":"themes/hexo-theme-Anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1536758613328},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1536758613329},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1536758613330},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1536758613330},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1536758613330},{"_id":"themes/hexo-theme-Anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1537077668128},{"_id":"themes/hexo-theme-Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1536758613331},{"_id":"themes/hexo-theme-Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1536758613334},{"_id":"themes/hexo-theme-Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1536758613334},{"_id":"source/images/12/webCache3.png","hash":"43d398fac560a2b7d5ae6ed602e682adea8baeeb","modified":1537018435170},{"_id":"source/images/home-bg.jpg","hash":"35131c8b7ab3943c9fe4577329cd1c412d1c4fac","modified":1537018435174},{"_id":"themes/hexo-theme-Anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1536758613328},{"_id":"themes/hexo-theme-Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1536758613329},{"_id":"themes/hexo-theme-Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536758613334},{"_id":"source/images/1/style.png","hash":"fdb061ff4c353921b77a9fae0334fa652108044b","modified":1537018435163},{"_id":"source/images/12/webCache4.png","hash":"a5382e0cea8b69bda04747514779d8bea2ac2465","modified":1537018435171},{"_id":"source/images/12/webCache2.png","hash":"e2d88a4ae3b23ef9addf644b4a88130ce78ee31b","modified":1537018435169},{"_id":"themes/hexo-theme-Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1536758613333},{"_id":"source/images/1/test.png","hash":"15e082bc8f77a89a07a65372b61e5230e4dd011e","modified":1537018435167},{"_id":"public/search.xml","hash":"2c15e82ccd690d6e52cd57d38bce3617824942c8","modified":1537078221662},{"_id":"public/tags/index.html","hash":"0fa699a133ea72b661a912c618f89e49ae51327e","modified":1537078221738},{"_id":"public/archives/2018/05/index.html","hash":"c3c3c3f715a3781dc383fe8d0d92c182e31ae7be","modified":1537078221738},{"_id":"public/archives/2018/06/index.html","hash":"41ae92d4f15fffd9895f7e3cec686c607f355334","modified":1537078221739},{"_id":"public/archives/2018/07/index.html","hash":"cd7cbf78106c08638e1dada0179211df4b17f19f","modified":1537078221739},{"_id":"public/archives/2018/09/index.html","hash":"1526137eb3c23e81e5d426d5480f7c7aa2db8d87","modified":1537078221739},{"_id":"public/tags/CSS/index.html","hash":"86252dc38eedb79d3bb20091bbfd92e0e739c3fc","modified":1537078221739},{"_id":"public/tags/CSS3/index.html","hash":"73e8f3f8a88195f26746ade5863f4dfcb36b985e","modified":1537078221739},{"_id":"public/tags/JSS/index.html","hash":"7a27d6636c82ceb1237855ec74f46250a0fd0334","modified":1537078221739},{"_id":"public/my/index.html","hash":"dc5756edd7d9014eff98188cb1d5c0ed09746ab6","modified":1537078221739},{"_id":"public/2018/09/13/87feece5/index.html","hash":"8a84be83336e48e07857043117709782e44f3e70","modified":1537078221739},{"_id":"public/2018/07/03/a27e515f/index.html","hash":"5208d59dcdcc25a613f30472f8481424eedc2309","modified":1537078221739},{"_id":"public/2018/06/26/6ff4728c/index.html","hash":"1ef4e93e6dddbe56a068a78158048772bbe93cf1","modified":1537078221740},{"_id":"public/2018/06/22/73f78475/index.html","hash":"df1ad135b14e69028917d5cb3761befe314552f5","modified":1537078221740},{"_id":"public/2018/05/13/4e8f9d20/index.html","hash":"9cc806d6aec534eb62a2c262dd13d16bfba4e1ff","modified":1537078221740},{"_id":"public/archives/index.html","hash":"2d24007596bc6209b86236bf30f073eb4ab33d20","modified":1537078221740},{"_id":"public/archives/2018/index.html","hash":"e1e1c625b7d206b5cec0011ccc13430c5ec83923","modified":1537078221740},{"_id":"public/index.html","hash":"a0dd4ff1c9f478389bf568f5f7097d036e360cb1","modified":1537078221740},{"_id":"public/tags/JS/index.html","hash":"e77407272a2f083115609e0e63ebdca91b8e6956","modified":1537078221740},{"_id":"public/CNAME","hash":"f09518cca7b34afbe26a343ee341c127e6d8fbaa","modified":1537078221745},{"_id":"public/images/avatar.jpg","hash":"060fd52312c619ce1c1dfee972100f9ebc0c5334","modified":1537078221745},{"_id":"public/images/sidebar-avatar.jpeg","hash":"d111258d765ace3bed65667e635efb5cdd0d183b","modified":1537078221745},{"_id":"public/images/15/15-1.png","hash":"9e9c7f1401910dda4a7d73bc4b53b493beccd8ab","modified":1537078221745},{"_id":"public/images/15/15-2.png","hash":"a32e88379cc250e918ca2d0a1d2285c0046cf166","modified":1537078221745},{"_id":"public/images/18/18-1.png","hash":"2f1c343661d46504ff4f8b3e30fb43abc7f7bc94","modified":1537078221745},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1537078221745},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1537078221745},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1537078221745},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1537078221746},{"_id":"public/images/home-bg-o.jpg","hash":"fc4bdf7fa98346ea35115151e4914cd1e5a946d9","modified":1537078221834},{"_id":"public/images/one.png","hash":"31b918daa10569ad450886576b0b27d2dcd12cb0","modified":1537078221834},{"_id":"public/images/post-bg-default.jpg","hash":"6bbe3de397f929a7ca0a49c88779a4a8dd904a88","modified":1537078221836},{"_id":"public/images/post-bg-github-cup.jpg","hash":"c5a7baaddbf0249598dcdad0ac35b16c7dc0cfbe","modified":1537078221836},{"_id":"public/images/post-bg-index-default.jpg","hash":"fb4c2386d7463a289d1b0e63798ecba71bda1735","modified":1537078221836},{"_id":"public/images/post-bg-universe.jpg","hash":"eaf5940a86ae49122fbfaa02be1f8d236775b6e0","modified":1537078221836},{"_id":"public/images/12/webCache3.png","hash":"43d398fac560a2b7d5ae6ed602e682adea8baeeb","modified":1537078221836},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1537078221836},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1537078221840},{"_id":"public/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1537078221840},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1537078221840},{"_id":"public/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1537078221840},{"_id":"public/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1537078221840},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1537078221840},{"_id":"public/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1537078221841},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537078221841},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1537078221841},{"_id":"public/images/1/style.png","hash":"fdb061ff4c353921b77a9fae0334fa652108044b","modified":1537078221841},{"_id":"public/images/12/webCache4.png","hash":"a5382e0cea8b69bda04747514779d8bea2ac2465","modified":1537078221841},{"_id":"public/images/home-bg.jpg","hash":"35131c8b7ab3943c9fe4577329cd1c412d1c4fac","modified":1537078221845},{"_id":"public/images/12/webCache2.png","hash":"e2d88a4ae3b23ef9addf644b4a88130ce78ee31b","modified":1537078221845},{"_id":"public/images/1/test.png","hash":"15e082bc8f77a89a07a65372b61e5230e4dd011e","modified":1537078221849}],"Category":[],"Data":[],"Page":[{"title":"简历","date":"2018-09-15T15:07:12.000Z","layout":"resume","skills":["javascript","css2 & css3","小程序","flutter","Vue"],"_content":"## 马伟强\n### 基本资料\n-----\n-  **概况**：`3年以上工作经验` | 男 | 28岁(1990年3月)  **地址**：上海\b浦东\n-  **电话**：`18016375545`  \n- **E-mail**： `sansan_show@126.com`\n-  **职位**：web前端工程师\n-  **学校**：山西农业大学  **学历**：本科 **专业**：计算机科学与技术\n\n### 自我评价\n___\n-\t能够语义化的编写HTML文档；了解HTML5新特性；熟悉`CSS2.1`，`CSS3`规范；熟练使用`sass`, `less`等进行开发;\n-\t熟练使用es5/es6开发；熟练使用`jQuery`, `Zepto`等js库；熟练使用`vuejs`开发，\b了解`nuxt`服务端渲染\b；熟悉`backbone`,`React`等框架进行开发；熟练微信`小程序`开发, 了解`mpvue`开发；\n-\t了解webpack,gulp等构建工具的使用；熟练使用git,svn等版本控制工具协同完成开发；\n-\t熟悉Java后端开发语言，熟练使用SpringMVC，Spring，Hibernate，Struts2/MyBatis等主流开源框架，了解B/S开发；\n-\t了解android及`React Native`开发; 了解`flutter\b移动端开发`；\n-\t了解`linux`命令;\n\n\n### 求职意向\n---\n- **到岗时间**：一个月内                **工作性质**：全职\n- **期望行业**：移动互联网/电子商务/金融/教育 **目标地点**：上海\n- **期望薪资**：年薪25W+s\n- **目标职能**：Web高级前端开发工程师\n- **求职状态**：观望有好的机会再考虑。","source":"my/index.md","raw":"---\ntitle: 简历\ndate: 2018-09-15 23:07:12\nlayout: resume\nskills: \n    - javascript\n    - css2 & css3\n    - 小程序\n    - flutter\n    - Vue\n---\n## 马伟强\n### 基本资料\n-----\n-  **概况**：`3年以上工作经验` | 男 | 28岁(1990年3月)  **地址**：上海\b浦东\n-  **电话**：`18016375545`  \n- **E-mail**： `sansan_show@126.com`\n-  **职位**：web前端工程师\n-  **学校**：山西农业大学  **学历**：本科 **专业**：计算机科学与技术\n\n### 自我评价\n___\n-\t能够语义化的编写HTML文档；了解HTML5新特性；熟悉`CSS2.1`，`CSS3`规范；熟练使用`sass`, `less`等进行开发;\n-\t熟练使用es5/es6开发；熟练使用`jQuery`, `Zepto`等js库；熟练使用`vuejs`开发，\b了解`nuxt`服务端渲染\b；熟悉`backbone`,`React`等框架进行开发；熟练微信`小程序`开发, 了解`mpvue`开发；\n-\t了解webpack,gulp等构建工具的使用；熟练使用git,svn等版本控制工具协同完成开发；\n-\t熟悉Java后端开发语言，熟练使用SpringMVC，Spring，Hibernate，Struts2/MyBatis等主流开源框架，了解B/S开发；\n-\t了解android及`React Native`开发; 了解`flutter\b移动端开发`；\n-\t了解`linux`命令;\n\n\n### 求职意向\n---\n- **到岗时间**：一个月内                **工作性质**：全职\n- **期望行业**：移动互联网/电子商务/金融/教育 **目标地点**：上海\n- **期望薪资**：年薪25W+s\n- **目标职能**：Web高级前端开发工程师\n- **求职状态**：观望有好的机会再考虑。","updated":"2018-09-16T05:22:44.078Z","path":"my/index.html","comments":1,"_id":"cjm4gn3zk0001vkjgz6nlr1fg","content":"<h2 id=\"马伟强\"><a href=\"#马伟强\" class=\"headerlink\" title=\"马伟强\"></a>马伟强</h2><h3 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h3><hr>\n<ul>\n<li><strong>概况</strong>：<code>3年以上工作经验</code> | 男 | 28岁(1990年3月)  <strong>地址</strong>：上海\b浦东</li>\n<li><strong>电话</strong>：<code>18016375545</code>  </li>\n<li><strong>E-mail</strong>： <a href=\"mailto:`sansan_show@126.com\" target=\"_blank\" rel=\"noopener\">`sansan_show@126.com</a>`</li>\n<li><strong>职位</strong>：web前端工程师</li>\n<li><strong>学校</strong>：山西农业大学  <strong>学历</strong>：本科 <strong>专业</strong>：计算机科学与技术</li>\n</ul>\n<h3 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h3><hr>\n<ul>\n<li>能够语义化的编写HTML文档；了解HTML5新特性；熟悉<code>CSS2.1</code>，<code>CSS3</code>规范；熟练使用<code>sass</code>, <code>less</code>等进行开发;</li>\n<li>熟练使用es5/es6开发；熟练使用<code>jQuery</code>, <code>Zepto</code>等js库；熟练使用<code>vuejs</code>开发，\b了解<code>nuxt</code>服务端渲染\b；熟悉<code>backbone</code>,<code>React</code>等框架进行开发；熟练微信<code>小程序</code>开发, 了解<code>mpvue</code>开发；</li>\n<li>了解webpack,gulp等构建工具的使用；熟练使用git,svn等版本控制工具协同完成开发；</li>\n<li>熟悉Java后端开发语言，熟练使用SpringMVC，Spring，Hibernate，Struts2/MyBatis等主流开源框架，了解B/S开发；</li>\n<li>了解android及<code>React Native</code>开发; 了解<code>flutter\b移动端开发</code>；</li>\n<li>了解<code>linux</code>命令;</li>\n</ul>\n<h3 id=\"求职意向\"><a href=\"#求职意向\" class=\"headerlink\" title=\"求职意向\"></a>求职意向</h3><hr>\n<ul>\n<li><strong>到岗时间</strong>：一个月内                <strong>工作性质</strong>：全职</li>\n<li><strong>期望行业</strong>：移动互联网/电子商务/金融/教育 <strong>目标地点</strong>：上海</li>\n<li><strong>期望薪资</strong>：年薪25W+s</li>\n<li><strong>目标职能</strong>：Web高级前端开发工程师</li>\n<li><strong>求职状态</strong>：观望有好的机会再考虑。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"马伟强\"><a href=\"#马伟强\" class=\"headerlink\" title=\"马伟强\"></a>马伟强</h2><h3 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h3><hr>\n<ul>\n<li><strong>概况</strong>：<code>3年以上工作经验</code> | 男 | 28岁(1990年3月)  <strong>地址</strong>：上海\b浦东</li>\n<li><strong>电话</strong>：<code>18016375545</code>  </li>\n<li><strong>E-mail</strong>： <a href=\"mailto:`sansan_show@126.com\" target=\"_blank\" rel=\"noopener\">`sansan_show@126.com</a>`</li>\n<li><strong>职位</strong>：web前端工程师</li>\n<li><strong>学校</strong>：山西农业大学  <strong>学历</strong>：本科 <strong>专业</strong>：计算机科学与技术</li>\n</ul>\n<h3 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h3><hr>\n<ul>\n<li>能够语义化的编写HTML文档；了解HTML5新特性；熟悉<code>CSS2.1</code>，<code>CSS3</code>规范；熟练使用<code>sass</code>, <code>less</code>等进行开发;</li>\n<li>熟练使用es5/es6开发；熟练使用<code>jQuery</code>, <code>Zepto</code>等js库；熟练使用<code>vuejs</code>开发，\b了解<code>nuxt</code>服务端渲染\b；熟悉<code>backbone</code>,<code>React</code>等框架进行开发；熟练微信<code>小程序</code>开发, 了解<code>mpvue</code>开发；</li>\n<li>了解webpack,gulp等构建工具的使用；熟练使用git,svn等版本控制工具协同完成开发；</li>\n<li>熟悉Java后端开发语言，熟练使用SpringMVC，Spring，Hibernate，Struts2/MyBatis等主流开源框架，了解B/S开发；</li>\n<li>了解android及<code>React Native</code>开发; 了解<code>flutter\b移动端开发</code>；</li>\n<li>了解<code>linux</code>命令;</li>\n</ul>\n<h3 id=\"求职意向\"><a href=\"#求职意向\" class=\"headerlink\" title=\"求职意向\"></a>求职意向</h3><hr>\n<ul>\n<li><strong>到岗时间</strong>：一个月内                <strong>工作性质</strong>：全职</li>\n<li><strong>期望行业</strong>：移动互联网/电子商务/金融/教育 <strong>目标地点</strong>：上海</li>\n<li><strong>期望薪资</strong>：年薪25W+s</li>\n<li><strong>目标职能</strong>：Web高级前端开发工程师</li>\n<li><strong>求职状态</strong>：观望有好的机会再考虑。</li>\n</ul>\n"},{"title":"标签","date":"2018-09-15T13:43:13.000Z","layout":"tags","description":"The more you know, the more ignorant","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-09-15 21:43:13\nlayout: tags\ndescription: 'The more you know, the more ignorant'\n---\n","updated":"2018-09-15T14:49:48.131Z","path":"tags/index.html","comments":1,"_id":"cjm4gn3zn0003vkjgqvalatxi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS控制CSS3，添加浏览器兼容前缀","abbrlink":"4e8f9d20","date":"2018-05-13T08:12:53.000Z","_content":"不同的浏览器对于有些css3属性名定义的时候，会加上一些前缀，比如`transform`,\n```\ndiv\n{\n    transform: rotate(30deg);\n    -ms-transform: rotate(30deg);        /* IE 9 */\n    -webkit-transform: rotate(30deg);    /* Safari and Chrome */\n    -o-transform: rotate(30deg);        /* Opera */\n    -moz-transform: rotate(30deg);        /* Firefox */\n}\n```\n\n有时候我们通过js控制css3属性。\n\n\n### 重点：\n```\nvar sty = document.createElement(\"div\").style;\n```\n通过chrome控制台打印出来的是这样的\n![document.createElement(\"div\").style](/images/1/style.png)\n\n### 遍历样式表\n现在前缀主要有这四种：webkit,moz,o,ms   \n通过遍历来匹配对应的前缀并返回\n```\n/**\n * 这个函数用来判断浏览器前缀\n * 返回standard表示不需要前缀\n * @param {string} prop \n */\nfunction vendor(prop) {\n    // 处理有中划线(-)分隔开的属性，事实上是以驼峰命名法\n    let afterProp = transformCamels(prop);\n    let transformNames = {\n        webkit: `webkit${afterProp}`,\n        moz: `moz${afterProp}`,\n        ms: `ms${afterProp}`,\n        o: `o${afterProp}`,\n        standard: `${prop}`\n    }\n    for(var key in transformNames) {\n        if(elementStyle[transformNames[key]] !== undefined) {\n            return key;\n        }  \n    }\n    return false\n}\n\nfunction transformCamels(prop){\n    let camels = prop.split('-');\n    camels.forEach((item, index) => {\n        camels[index] = item.charAt(0).toUpperCase() + item.substr(1);\n    })\n    let afterProp = camels.join('');\n    return afterProp;\n}\n```\n\n### 使用\n封装成函数就可以使用了\n```\nfunction prefixStyle(style) {\n    let prefix = vendor(style);\n    if(prefix === false) {\n        return false;\n    }\n    if(prefix === 'standard') {\n        return style;\n    }\n    return prefix + style.charAt(0).toUpperCase() + style.substr(1);\n}\n```\n\n### 测试\n![测试结果](/images/1/test.png)\n\n### 完整代码\n\n[完整代码](./js-add-css3-prefixer.js)","source":"_posts/JS控制CSS3，添加浏览器兼容前缀.md","raw":"---\ntitle: JS控制CSS3，添加浏览器兼容前缀\ntags:\n  - JS\n  - CSS\n  - CSS3\nabbrlink: 4e8f9d20\ndate: 2018-05-13 16:12:53\n---\n不同的浏览器对于有些css3属性名定义的时候，会加上一些前缀，比如`transform`,\n```\ndiv\n{\n    transform: rotate(30deg);\n    -ms-transform: rotate(30deg);        /* IE 9 */\n    -webkit-transform: rotate(30deg);    /* Safari and Chrome */\n    -o-transform: rotate(30deg);        /* Opera */\n    -moz-transform: rotate(30deg);        /* Firefox */\n}\n```\n\n有时候我们通过js控制css3属性。\n\n\n### 重点：\n```\nvar sty = document.createElement(\"div\").style;\n```\n通过chrome控制台打印出来的是这样的\n![document.createElement(\"div\").style](/images/1/style.png)\n\n### 遍历样式表\n现在前缀主要有这四种：webkit,moz,o,ms   \n通过遍历来匹配对应的前缀并返回\n```\n/**\n * 这个函数用来判断浏览器前缀\n * 返回standard表示不需要前缀\n * @param {string} prop \n */\nfunction vendor(prop) {\n    // 处理有中划线(-)分隔开的属性，事实上是以驼峰命名法\n    let afterProp = transformCamels(prop);\n    let transformNames = {\n        webkit: `webkit${afterProp}`,\n        moz: `moz${afterProp}`,\n        ms: `ms${afterProp}`,\n        o: `o${afterProp}`,\n        standard: `${prop}`\n    }\n    for(var key in transformNames) {\n        if(elementStyle[transformNames[key]] !== undefined) {\n            return key;\n        }  \n    }\n    return false\n}\n\nfunction transformCamels(prop){\n    let camels = prop.split('-');\n    camels.forEach((item, index) => {\n        camels[index] = item.charAt(0).toUpperCase() + item.substr(1);\n    })\n    let afterProp = camels.join('');\n    return afterProp;\n}\n```\n\n### 使用\n封装成函数就可以使用了\n```\nfunction prefixStyle(style) {\n    let prefix = vendor(style);\n    if(prefix === false) {\n        return false;\n    }\n    if(prefix === 'standard') {\n        return style;\n    }\n    return prefix + style.charAt(0).toUpperCase() + style.substr(1);\n}\n```\n\n### 测试\n![测试结果](/images/1/test.png)\n\n### 完整代码\n\n[完整代码](./js-add-css3-prefixer.js)","slug":"JS控制CSS3，添加浏览器兼容前缀","published":1,"updated":"2018-09-16T00:35:05.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4gn3zh0000vkjgjta5hvb6","content":"<p>不同的浏览器对于有些css3属性名定义的时候，会加上一些前缀，比如<code>transform</code>,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    transform: rotate(30deg);</span><br><span class=\"line\">    -ms-transform: rotate(30deg);        /* IE 9 */</span><br><span class=\"line\">    -webkit-transform: rotate(30deg);    /* Safari and Chrome */</span><br><span class=\"line\">    -o-transform: rotate(30deg);        /* Opera */</span><br><span class=\"line\">    -moz-transform: rotate(30deg);        /* Firefox */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有时候我们通过js控制css3属性。</p>\n<h3 id=\"重点：\"><a href=\"#重点：\" class=\"headerlink\" title=\"重点：\"></a>重点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sty = document.createElement(&quot;div&quot;).style;</span><br></pre></td></tr></table></figure>\n<p>通过chrome控制台打印出来的是这样的<br><img src=\"/images/1/style.png\" alt=\"document.createElement(&quot;div&quot;).style\"></p>\n<h3 id=\"遍历样式表\"><a href=\"#遍历样式表\" class=\"headerlink\" title=\"遍历样式表\"></a>遍历样式表</h3><p>现在前缀主要有这四种：webkit,moz,o,ms<br>通过遍历来匹配对应的前缀并返回<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 这个函数用来判断浏览器前缀</span><br><span class=\"line\"> * 返回standard表示不需要前缀</span><br><span class=\"line\"> * @param &#123;string&#125; prop </span><br><span class=\"line\"> */</span><br><span class=\"line\">function vendor(prop) &#123;</span><br><span class=\"line\">    // 处理有中划线(-)分隔开的属性，事实上是以驼峰命名法</span><br><span class=\"line\">    let afterProp = transformCamels(prop);</span><br><span class=\"line\">    let transformNames = &#123;</span><br><span class=\"line\">        webkit: `webkit$&#123;afterProp&#125;`,</span><br><span class=\"line\">        moz: `moz$&#123;afterProp&#125;`,</span><br><span class=\"line\">        ms: `ms$&#123;afterProp&#125;`,</span><br><span class=\"line\">        o: `o$&#123;afterProp&#125;`,</span><br><span class=\"line\">        standard: `$&#123;prop&#125;`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var key in transformNames) &#123;</span><br><span class=\"line\">        if(elementStyle[transformNames[key]] !== undefined) &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function transformCamels(prop)&#123;</span><br><span class=\"line\">    let camels = prop.split(&apos;-&apos;);</span><br><span class=\"line\">    camels.forEach((item, index) =&gt; &#123;</span><br><span class=\"line\">        camels[index] = item.charAt(0).toUpperCase() + item.substr(1);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    let afterProp = camels.join(&apos;&apos;);</span><br><span class=\"line\">    return afterProp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>封装成函数就可以使用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function prefixStyle(style) &#123;</span><br><span class=\"line\">    let prefix = vendor(style);</span><br><span class=\"line\">    if(prefix === false) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(prefix === &apos;standard&apos;) &#123;</span><br><span class=\"line\">        return style;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return prefix + style.charAt(0).toUpperCase() + style.substr(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/images/1/test.png\" alt=\"测试结果\"></p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p><a href=\"./js-add-css3-prefixer.js\">完整代码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>不同的浏览器对于有些css3属性名定义的时候，会加上一些前缀，比如<code>transform</code>,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    transform: rotate(30deg);</span><br><span class=\"line\">    -ms-transform: rotate(30deg);        /* IE 9 */</span><br><span class=\"line\">    -webkit-transform: rotate(30deg);    /* Safari and Chrome */</span><br><span class=\"line\">    -o-transform: rotate(30deg);        /* Opera */</span><br><span class=\"line\">    -moz-transform: rotate(30deg);        /* Firefox */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有时候我们通过js控制css3属性。</p>\n<h3 id=\"重点：\"><a href=\"#重点：\" class=\"headerlink\" title=\"重点：\"></a>重点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sty = document.createElement(&quot;div&quot;).style;</span><br></pre></td></tr></table></figure>\n<p>通过chrome控制台打印出来的是这样的<br><img src=\"/images/1/style.png\" alt=\"document.createElement(&quot;div&quot;).style\"></p>\n<h3 id=\"遍历样式表\"><a href=\"#遍历样式表\" class=\"headerlink\" title=\"遍历样式表\"></a>遍历样式表</h3><p>现在前缀主要有这四种：webkit,moz,o,ms<br>通过遍历来匹配对应的前缀并返回<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 这个函数用来判断浏览器前缀</span><br><span class=\"line\"> * 返回standard表示不需要前缀</span><br><span class=\"line\"> * @param &#123;string&#125; prop </span><br><span class=\"line\"> */</span><br><span class=\"line\">function vendor(prop) &#123;</span><br><span class=\"line\">    // 处理有中划线(-)分隔开的属性，事实上是以驼峰命名法</span><br><span class=\"line\">    let afterProp = transformCamels(prop);</span><br><span class=\"line\">    let transformNames = &#123;</span><br><span class=\"line\">        webkit: `webkit$&#123;afterProp&#125;`,</span><br><span class=\"line\">        moz: `moz$&#123;afterProp&#125;`,</span><br><span class=\"line\">        ms: `ms$&#123;afterProp&#125;`,</span><br><span class=\"line\">        o: `o$&#123;afterProp&#125;`,</span><br><span class=\"line\">        standard: `$&#123;prop&#125;`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var key in transformNames) &#123;</span><br><span class=\"line\">        if(elementStyle[transformNames[key]] !== undefined) &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function transformCamels(prop)&#123;</span><br><span class=\"line\">    let camels = prop.split(&apos;-&apos;);</span><br><span class=\"line\">    camels.forEach((item, index) =&gt; &#123;</span><br><span class=\"line\">        camels[index] = item.charAt(0).toUpperCase() + item.substr(1);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    let afterProp = camels.join(&apos;&apos;);</span><br><span class=\"line\">    return afterProp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>封装成函数就可以使用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function prefixStyle(style) &#123;</span><br><span class=\"line\">    let prefix = vendor(style);</span><br><span class=\"line\">    if(prefix === false) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(prefix === &apos;standard&apos;) &#123;</span><br><span class=\"line\">        return style;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return prefix + style.charAt(0).toUpperCase() + style.substr(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/images/1/test.png\" alt=\"测试结果\"></p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p><a href=\"./js-add-css3-prefixer.js\">完整代码</a></p>\n"},{"title":"PC端JS打开摄像头并拍照","abbrlink":"73f78475","date":"2018-06-22T01:50:06.000Z","_content":"# PC端JS打开摄像头并拍照\n\n\n## 主要步骤及要点\n1. 打开摄像头主要用到getUserMedia方法，然后将获取到的媒体流置入video标签\n\n2. 截取图片主要用到canvas绘图，使用drawImage方法将video的内容绘至canvas中\n\n3. 将截取的内容上传至服务器，将canvas中的内容转为base64格式上传，后端（PHP）通过file_put_contents将其转为图片\n\n## Html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>JS调用摄像头并拍照</title>\n    <style>\n        video {  \n            border: 1px solid #ccc;  \n            display: block;  \n            margin: 0 0 20px 0;  \n            float:left;  \n        }  \n        #canvas {  \n            margin-top: 20px;  \n            border: 1px solid #ccc;  \n            display: block;  \n        }  \n    </style>\n</head>\n<body>\n    <video id=\"video\" width=\"500\" height=\"400\" autoplay></video>\n    <canvas id=\"canvas\"></canvas>\n    <button id=\"snap\">拍照</button>\n    <button id=\"close\">关闭</button>\n    <button id=\"upload\">上传</button>\n</body>\n</html>\n```\n\n## javascript 部分\n\n\n### 1. 打开摄像头\n\n**getUserMedia有新旧版本：**\n\n#### - 旧版本位于`navigator`下面   \n```\n// 获取媒体方法 \nnavigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;\n\nif(navigator.getMedia) {\n    navigator.getMedia({\n        video: true,\n        audio: true\n    }, function(stream) {\n        // 用来获取停止摄像头的方法所在的对象\n        // 这个写法其实是兼容了<在旧版本中可以直接通过调用`MediaStream.stop()` 来关闭摄像头，不过在新版之中已废弃。需要使用`MediaStream.getTracks()[index].stop()` 来关闭相应的Track>\n        mediaStreamTrack = typeof stream.stop === 'function' ? stream : stream.getTracks()[1]; \n\n        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);\n        videoEle.play();\n    }, function(err) {\n        console.log(err);\n    });\n}\n\n```\n> getUserMedia参数说明\n1. 第一个参数中指示需要使用视频（video）或音频（audio）\n2. 第二个参数调用成功后的回调,其中带一个参数（MediaStream）。在旧版本中可以直接通过调用`MediaStream.stop()` 来关闭摄像头，不过在新版之中已废弃。需要使用`MediaStream.getTracks()[index].stop()` 来关闭相应的Track   \n比如：新版中关闭video则根据第一个参数index=0,使用MediaStream.getTracks()[0].stop()\n\n3. 第三个参数指示调用失败后的回调\n\n\n#### - 新版本位于navigator.mediaDevices 对象下\n```\nif(navigator.mediaDevices && navigator.mediaDevices.getUserMeida){\n    navigator.mediaDevices.getUserMeida({\n        video: true,\n        audio: true\n    }).then(function(stream) {\n        mediaStreamTrack = typeof stream.stop === 'function' ? stream : stream.getTracks()[1];\n        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);\n        videoEle.play();\n    }).catch(function(err) {\n        console.log(err);\n    })\n}\n\n```\n\n与旧版类似，不过该方法返回了一个Promise对象，可以使用then和catch表示成功与失败的回调\n\n**另外**，需要注意的是，MediaStream.getTracks() 返回的Tracks数组是按第一个参数倒序排列的\n\n比如现在定义了\n```\n{\n    video: true,\n    audio: true\n}\n```\n想关闭摄像头，就需要调用MediaStream.getTracks()[1].stop();\n\n同理，0对应于audio的track\n\n\n### 2. 摄像头操作\n\n#### 0. 首先初始化画布\n```\n var context = canvas.getContext(\"2d\"); \n var canvesEle = document.getElementById(\"canves\");\n var videoEle = document.getElementById(\"video\");\n```\n\n#### 1. 拍照\ndocument.getElementById(\"snap\").addEventListener('click', function(e){\n    context.drawImage(videoEle, 0, 0, 500, 400);\n})\n\n#### 2. 关闭摄像头\n```\n// 关闭摄像头\nclose.addEventListener('click', function() {\n    mediaStreamTrack && mediaStreamTrack.stop();\n}, false);\n```\n\n#### 3. 图像上传获取\n```\ncanvas.toDataURL('image/png')\n```\n\n### 完整js\n```\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\n<script type=\"text/javascript\">\n    function $(elem) {\n        return document.querySelector(elem);\n    }\n\n    // 获取媒体方法（旧方法）\n    navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;\n\n    var canvas = $('canvas'),\n        context = canvas.getContext('2d'),\n        video = $('video'),\n        snap = $('#snap'),\n        close = $('#close'),\n        upload = $('#upload'),\n        uploaded = $('#uploaded'),\n        mediaStreamTrack;\n\n    // 获取媒体方法（新方法）\n    // 使用新方法打开摄像头\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: true\n        }).then(function(stream) {\n            console.log(stream);\n\n            mediaStreamTrack = typeof stream.stop === 'function' ? stream : stream.getTracks()[1];\n\n            video.src = (window.URL || window.webkitURL).createObjectURL(stream);\n            video.play();\n        }).catch(function(err) {\n            console.log(err);\n        })\n    }\n    // 使用旧方法打开摄像头\n    else if (navigator.getMedia) {\n        navigator.getMedia({\n            video: true\n        }, function(stream) {\n            mediaStreamTrack = stream.getTracks()[0];\n\n            video.src = (window.URL || window.webkitURL).createObjectURL(stream);\n            video.play();\n        }, function(err) {\n            console.log(err);\n        });\n    }\n\n    // 截取图像\n    snap.addEventListener('click', function() {\n        context.drawImage(video, 0, 0, 500, 400);\n    }, false);\n\n    // 关闭摄像头\n    close.addEventListener('click', function() {\n        mediaStreamTrack && mediaStreamTrack.stop();\n    }, false);\n\n    // 上传截取的图像\n    upload.addEventListener('click', function() {\n        jQuery.post('/uploadSnap.php', {\n            snapData: canvas.toDataURL('image/png')\n        }).done(function(rs) {\n            rs = JSON.parse(rs);\n\n            console.log(rs);\n\n            uploaded.src = rs.path;\n        }).fail(function(err) {\n            console.log(err);\n        });\n    }, false);\n\n</script>\n```\n \n[getUserMedia支持情况-不容乐观：点击查看](https://caniuse.com/#search=getUserMedia)\n","source":"_posts/PC端JS打开摄像头并拍照.md","raw":"---\ntitle: PC端JS打开摄像头并拍照\ntags:\n  - JS\nabbrlink: 73f78475\ndate: 2018-06-22 09:50:06\n---\n# PC端JS打开摄像头并拍照\n\n\n## 主要步骤及要点\n1. 打开摄像头主要用到getUserMedia方法，然后将获取到的媒体流置入video标签\n\n2. 截取图片主要用到canvas绘图，使用drawImage方法将video的内容绘至canvas中\n\n3. 将截取的内容上传至服务器，将canvas中的内容转为base64格式上传，后端（PHP）通过file_put_contents将其转为图片\n\n## Html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>JS调用摄像头并拍照</title>\n    <style>\n        video {  \n            border: 1px solid #ccc;  \n            display: block;  \n            margin: 0 0 20px 0;  \n            float:left;  \n        }  \n        #canvas {  \n            margin-top: 20px;  \n            border: 1px solid #ccc;  \n            display: block;  \n        }  \n    </style>\n</head>\n<body>\n    <video id=\"video\" width=\"500\" height=\"400\" autoplay></video>\n    <canvas id=\"canvas\"></canvas>\n    <button id=\"snap\">拍照</button>\n    <button id=\"close\">关闭</button>\n    <button id=\"upload\">上传</button>\n</body>\n</html>\n```\n\n## javascript 部分\n\n\n### 1. 打开摄像头\n\n**getUserMedia有新旧版本：**\n\n#### - 旧版本位于`navigator`下面   \n```\n// 获取媒体方法 \nnavigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;\n\nif(navigator.getMedia) {\n    navigator.getMedia({\n        video: true,\n        audio: true\n    }, function(stream) {\n        // 用来获取停止摄像头的方法所在的对象\n        // 这个写法其实是兼容了<在旧版本中可以直接通过调用`MediaStream.stop()` 来关闭摄像头，不过在新版之中已废弃。需要使用`MediaStream.getTracks()[index].stop()` 来关闭相应的Track>\n        mediaStreamTrack = typeof stream.stop === 'function' ? stream : stream.getTracks()[1]; \n\n        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);\n        videoEle.play();\n    }, function(err) {\n        console.log(err);\n    });\n}\n\n```\n> getUserMedia参数说明\n1. 第一个参数中指示需要使用视频（video）或音频（audio）\n2. 第二个参数调用成功后的回调,其中带一个参数（MediaStream）。在旧版本中可以直接通过调用`MediaStream.stop()` 来关闭摄像头，不过在新版之中已废弃。需要使用`MediaStream.getTracks()[index].stop()` 来关闭相应的Track   \n比如：新版中关闭video则根据第一个参数index=0,使用MediaStream.getTracks()[0].stop()\n\n3. 第三个参数指示调用失败后的回调\n\n\n#### - 新版本位于navigator.mediaDevices 对象下\n```\nif(navigator.mediaDevices && navigator.mediaDevices.getUserMeida){\n    navigator.mediaDevices.getUserMeida({\n        video: true,\n        audio: true\n    }).then(function(stream) {\n        mediaStreamTrack = typeof stream.stop === 'function' ? stream : stream.getTracks()[1];\n        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);\n        videoEle.play();\n    }).catch(function(err) {\n        console.log(err);\n    })\n}\n\n```\n\n与旧版类似，不过该方法返回了一个Promise对象，可以使用then和catch表示成功与失败的回调\n\n**另外**，需要注意的是，MediaStream.getTracks() 返回的Tracks数组是按第一个参数倒序排列的\n\n比如现在定义了\n```\n{\n    video: true,\n    audio: true\n}\n```\n想关闭摄像头，就需要调用MediaStream.getTracks()[1].stop();\n\n同理，0对应于audio的track\n\n\n### 2. 摄像头操作\n\n#### 0. 首先初始化画布\n```\n var context = canvas.getContext(\"2d\"); \n var canvesEle = document.getElementById(\"canves\");\n var videoEle = document.getElementById(\"video\");\n```\n\n#### 1. 拍照\ndocument.getElementById(\"snap\").addEventListener('click', function(e){\n    context.drawImage(videoEle, 0, 0, 500, 400);\n})\n\n#### 2. 关闭摄像头\n```\n// 关闭摄像头\nclose.addEventListener('click', function() {\n    mediaStreamTrack && mediaStreamTrack.stop();\n}, false);\n```\n\n#### 3. 图像上传获取\n```\ncanvas.toDataURL('image/png')\n```\n\n### 完整js\n```\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\n<script type=\"text/javascript\">\n    function $(elem) {\n        return document.querySelector(elem);\n    }\n\n    // 获取媒体方法（旧方法）\n    navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;\n\n    var canvas = $('canvas'),\n        context = canvas.getContext('2d'),\n        video = $('video'),\n        snap = $('#snap'),\n        close = $('#close'),\n        upload = $('#upload'),\n        uploaded = $('#uploaded'),\n        mediaStreamTrack;\n\n    // 获取媒体方法（新方法）\n    // 使用新方法打开摄像头\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: true\n        }).then(function(stream) {\n            console.log(stream);\n\n            mediaStreamTrack = typeof stream.stop === 'function' ? stream : stream.getTracks()[1];\n\n            video.src = (window.URL || window.webkitURL).createObjectURL(stream);\n            video.play();\n        }).catch(function(err) {\n            console.log(err);\n        })\n    }\n    // 使用旧方法打开摄像头\n    else if (navigator.getMedia) {\n        navigator.getMedia({\n            video: true\n        }, function(stream) {\n            mediaStreamTrack = stream.getTracks()[0];\n\n            video.src = (window.URL || window.webkitURL).createObjectURL(stream);\n            video.play();\n        }, function(err) {\n            console.log(err);\n        });\n    }\n\n    // 截取图像\n    snap.addEventListener('click', function() {\n        context.drawImage(video, 0, 0, 500, 400);\n    }, false);\n\n    // 关闭摄像头\n    close.addEventListener('click', function() {\n        mediaStreamTrack && mediaStreamTrack.stop();\n    }, false);\n\n    // 上传截取的图像\n    upload.addEventListener('click', function() {\n        jQuery.post('/uploadSnap.php', {\n            snapData: canvas.toDataURL('image/png')\n        }).done(function(rs) {\n            rs = JSON.parse(rs);\n\n            console.log(rs);\n\n            uploaded.src = rs.path;\n        }).fail(function(err) {\n            console.log(err);\n        });\n    }, false);\n\n</script>\n```\n \n[getUserMedia支持情况-不容乐观：点击查看](https://caniuse.com/#search=getUserMedia)\n","slug":"PC端JS打开摄像头并拍照","published":1,"updated":"2018-09-16T00:35:05.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4gn3zl0002vkjg7wlu45zh","content":"<h1 id=\"PC端JS打开摄像头并拍照\"><a href=\"#PC端JS打开摄像头并拍照\" class=\"headerlink\" title=\"PC端JS打开摄像头并拍照\"></a>PC端JS打开摄像头并拍照</h1><h2 id=\"主要步骤及要点\"><a href=\"#主要步骤及要点\" class=\"headerlink\" title=\"主要步骤及要点\"></a>主要步骤及要点</h2><ol>\n<li><p>打开摄像头主要用到getUserMedia方法，然后将获取到的媒体流置入video标签</p>\n</li>\n<li><p>截取图片主要用到canvas绘图，使用drawImage方法将video的内容绘至canvas中</p>\n</li>\n<li><p>将截取的内容上传至服务器，将canvas中的内容转为base64格式上传，后端（PHP）通过file_put_contents将其转为图片</p>\n</li>\n</ol>\n<h2 id=\"Html\"><a href=\"#Html\" class=\"headerlink\" title=\"Html\"></a>Html</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;JS调用摄像头并拍照&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        video &#123;  </span><br><span class=\"line\">            border: 1px solid #ccc;  </span><br><span class=\"line\">            display: block;  </span><br><span class=\"line\">            margin: 0 0 20px 0;  </span><br><span class=\"line\">            float:left;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        #canvas &#123;  </span><br><span class=\"line\">            margin-top: 20px;  </span><br><span class=\"line\">            border: 1px solid #ccc;  </span><br><span class=\"line\">            display: block;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;video id=&quot;video&quot; width=&quot;500&quot; height=&quot;400&quot; autoplay&gt;&lt;/video&gt;</span><br><span class=\"line\">    &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">    &lt;button id=&quot;snap&quot;&gt;拍照&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;close&quot;&gt;关闭&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;upload&quot;&gt;上传&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"javascript-部分\"><a href=\"#javascript-部分\" class=\"headerlink\" title=\"javascript 部分\"></a>javascript 部分</h2><h3 id=\"1-打开摄像头\"><a href=\"#1-打开摄像头\" class=\"headerlink\" title=\"1. 打开摄像头\"></a>1. 打开摄像头</h3><p><strong>getUserMedia有新旧版本：</strong></p>\n<h4 id=\"旧版本位于navigator下面\"><a href=\"#旧版本位于navigator下面\" class=\"headerlink\" title=\"- 旧版本位于navigator下面\"></a>- 旧版本位于<code>navigator</code>下面</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取媒体方法 </span><br><span class=\"line\">navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;</span><br><span class=\"line\"></span><br><span class=\"line\">if(navigator.getMedia) &#123;</span><br><span class=\"line\">    navigator.getMedia(&#123;</span><br><span class=\"line\">        video: true,</span><br><span class=\"line\">        audio: true</span><br><span class=\"line\">    &#125;, function(stream) &#123;</span><br><span class=\"line\">        // 用来获取停止摄像头的方法所在的对象</span><br><span class=\"line\">        // 这个写法其实是兼容了&lt;在旧版本中可以直接通过调用`MediaStream.stop()` 来关闭摄像头，不过在新版之中已废弃。需要使用`MediaStream.getTracks()[index].stop()` 来关闭相应的Track&gt;</span><br><span class=\"line\">        mediaStreamTrack = typeof stream.stop === &apos;function&apos; ? stream : stream.getTracks()[1]; </span><br><span class=\"line\"></span><br><span class=\"line\">        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class=\"line\">        videoEle.play();</span><br><span class=\"line\">    &#125;, function(err) &#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>getUserMedia参数说明</p>\n<ol>\n<li>第一个参数中指示需要使用视频（video）或音频（audio）</li>\n<li>第二个参数调用成功后的回调,其中带一个参数（MediaStream）。在旧版本中可以直接通过调用<code>MediaStream.stop()</code> 来关闭摄像头，不过在新版之中已废弃。需要使用<code>MediaStream.getTracks()[index].stop()</code> 来关闭相应的Track<br>比如：新版中关闭video则根据第一个参数index=0,使用MediaStream.getTracks()[0].stop()</li>\n</ol>\n</blockquote>\n<ol start=\"3\">\n<li>第三个参数指示调用失败后的回调</li>\n</ol>\n<h4 id=\"新版本位于navigator-mediaDevices-对象下\"><a href=\"#新版本位于navigator-mediaDevices-对象下\" class=\"headerlink\" title=\"- 新版本位于navigator.mediaDevices 对象下\"></a>- 新版本位于navigator.mediaDevices 对象下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMeida)&#123;</span><br><span class=\"line\">    navigator.mediaDevices.getUserMeida(&#123;</span><br><span class=\"line\">        video: true,</span><br><span class=\"line\">        audio: true</span><br><span class=\"line\">    &#125;).then(function(stream) &#123;</span><br><span class=\"line\">        mediaStreamTrack = typeof stream.stop === &apos;function&apos; ? stream : stream.getTracks()[1];</span><br><span class=\"line\">        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class=\"line\">        videoEle.play();</span><br><span class=\"line\">    &#125;).catch(function(err) &#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与旧版类似，不过该方法返回了一个Promise对象，可以使用then和catch表示成功与失败的回调</p>\n<p><strong>另外</strong>，需要注意的是，MediaStream.getTracks() 返回的Tracks数组是按第一个参数倒序排列的</p>\n<p>比如现在定义了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    video: true,</span><br><span class=\"line\">    audio: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>想关闭摄像头，就需要调用MediaStream.getTracks()[1].stop();</p>\n<p>同理，0对应于audio的track</p>\n<h3 id=\"2-摄像头操作\"><a href=\"#2-摄像头操作\" class=\"headerlink\" title=\"2. 摄像头操作\"></a>2. 摄像头操作</h3><h4 id=\"0-首先初始化画布\"><a href=\"#0-首先初始化画布\" class=\"headerlink\" title=\"0. 首先初始化画布\"></a>0. 首先初始化画布</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var context = canvas.getContext(&quot;2d&quot;); </span><br><span class=\"line\">var canvesEle = document.getElementById(&quot;canves&quot;);</span><br><span class=\"line\">var videoEle = document.getElementById(&quot;video&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-拍照\"><a href=\"#1-拍照\" class=\"headerlink\" title=\"1. 拍照\"></a>1. 拍照</h4><p>document.getElementById(“snap”).addEventListener(‘click’, function(e){<br>    context.drawImage(videoEle, 0, 0, 500, 400);<br>})</p>\n<h4 id=\"2-关闭摄像头\"><a href=\"#2-关闭摄像头\" class=\"headerlink\" title=\"2. 关闭摄像头\"></a>2. 关闭摄像头</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 关闭摄像头</span><br><span class=\"line\">close.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">    mediaStreamTrack &amp;&amp; mediaStreamTrack.stop();</span><br><span class=\"line\">&#125;, false);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-图像上传获取\"><a href=\"#3-图像上传获取\" class=\"headerlink\" title=\"3. 图像上传获取\"></a>3. 图像上传获取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.toDataURL(&apos;image/png&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整js\"><a href=\"#完整js\" class=\"headerlink\" title=\"完整js\"></a>完整js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    function $(elem) &#123;</span><br><span class=\"line\">        return document.querySelector(elem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 获取媒体方法（旧方法）</span><br><span class=\"line\">    navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;</span><br><span class=\"line\"></span><br><span class=\"line\">    var canvas = $(&apos;canvas&apos;),</span><br><span class=\"line\">        context = canvas.getContext(&apos;2d&apos;),</span><br><span class=\"line\">        video = $(&apos;video&apos;),</span><br><span class=\"line\">        snap = $(&apos;#snap&apos;),</span><br><span class=\"line\">        close = $(&apos;#close&apos;),</span><br><span class=\"line\">        upload = $(&apos;#upload&apos;),</span><br><span class=\"line\">        uploaded = $(&apos;#uploaded&apos;),</span><br><span class=\"line\">        mediaStreamTrack;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 获取媒体方法（新方法）</span><br><span class=\"line\">    // 使用新方法打开摄像头</span><br><span class=\"line\">    if (navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span><br><span class=\"line\">        navigator.mediaDevices.getUserMedia(&#123;</span><br><span class=\"line\">            video: true,</span><br><span class=\"line\">            audio: true</span><br><span class=\"line\">        &#125;).then(function(stream) &#123;</span><br><span class=\"line\">            console.log(stream);</span><br><span class=\"line\"></span><br><span class=\"line\">            mediaStreamTrack = typeof stream.stop === &apos;function&apos; ? stream : stream.getTracks()[1];</span><br><span class=\"line\"></span><br><span class=\"line\">            video.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class=\"line\">            video.play();</span><br><span class=\"line\">        &#125;).catch(function(err) &#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 使用旧方法打开摄像头</span><br><span class=\"line\">    else if (navigator.getMedia) &#123;</span><br><span class=\"line\">        navigator.getMedia(&#123;</span><br><span class=\"line\">            video: true</span><br><span class=\"line\">        &#125;, function(stream) &#123;</span><br><span class=\"line\">            mediaStreamTrack = stream.getTracks()[0];</span><br><span class=\"line\"></span><br><span class=\"line\">            video.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class=\"line\">            video.play();</span><br><span class=\"line\">        &#125;, function(err) &#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 截取图像</span><br><span class=\"line\">    snap.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        context.drawImage(video, 0, 0, 500, 400);</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 关闭摄像头</span><br><span class=\"line\">    close.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        mediaStreamTrack &amp;&amp; mediaStreamTrack.stop();</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 上传截取的图像</span><br><span class=\"line\">    upload.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        jQuery.post(&apos;/uploadSnap.php&apos;, &#123;</span><br><span class=\"line\">            snapData: canvas.toDataURL(&apos;image/png&apos;)</span><br><span class=\"line\">        &#125;).done(function(rs) &#123;</span><br><span class=\"line\">            rs = JSON.parse(rs);</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(rs);</span><br><span class=\"line\"></span><br><span class=\"line\">            uploaded.src = rs.path;</span><br><span class=\"line\">        &#125;).fail(function(err) &#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://caniuse.com/#search=getUserMedia\" target=\"_blank\" rel=\"noopener\">getUserMedia支持情况-不容乐观：点击查看</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"PC端JS打开摄像头并拍照\"><a href=\"#PC端JS打开摄像头并拍照\" class=\"headerlink\" title=\"PC端JS打开摄像头并拍照\"></a>PC端JS打开摄像头并拍照</h1><h2 id=\"主要步骤及要点\"><a href=\"#主要步骤及要点\" class=\"headerlink\" title=\"主要步骤及要点\"></a>主要步骤及要点</h2><ol>\n<li><p>打开摄像头主要用到getUserMedia方法，然后将获取到的媒体流置入video标签</p>\n</li>\n<li><p>截取图片主要用到canvas绘图，使用drawImage方法将video的内容绘至canvas中</p>\n</li>\n<li><p>将截取的内容上传至服务器，将canvas中的内容转为base64格式上传，后端（PHP）通过file_put_contents将其转为图片</p>\n</li>\n</ol>\n<h2 id=\"Html\"><a href=\"#Html\" class=\"headerlink\" title=\"Html\"></a>Html</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;JS调用摄像头并拍照&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        video &#123;  </span><br><span class=\"line\">            border: 1px solid #ccc;  </span><br><span class=\"line\">            display: block;  </span><br><span class=\"line\">            margin: 0 0 20px 0;  </span><br><span class=\"line\">            float:left;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        #canvas &#123;  </span><br><span class=\"line\">            margin-top: 20px;  </span><br><span class=\"line\">            border: 1px solid #ccc;  </span><br><span class=\"line\">            display: block;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;video id=&quot;video&quot; width=&quot;500&quot; height=&quot;400&quot; autoplay&gt;&lt;/video&gt;</span><br><span class=\"line\">    &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">    &lt;button id=&quot;snap&quot;&gt;拍照&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;close&quot;&gt;关闭&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;upload&quot;&gt;上传&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"javascript-部分\"><a href=\"#javascript-部分\" class=\"headerlink\" title=\"javascript 部分\"></a>javascript 部分</h2><h3 id=\"1-打开摄像头\"><a href=\"#1-打开摄像头\" class=\"headerlink\" title=\"1. 打开摄像头\"></a>1. 打开摄像头</h3><p><strong>getUserMedia有新旧版本：</strong></p>\n<h4 id=\"旧版本位于navigator下面\"><a href=\"#旧版本位于navigator下面\" class=\"headerlink\" title=\"- 旧版本位于navigator下面\"></a>- 旧版本位于<code>navigator</code>下面</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取媒体方法 </span><br><span class=\"line\">navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;</span><br><span class=\"line\"></span><br><span class=\"line\">if(navigator.getMedia) &#123;</span><br><span class=\"line\">    navigator.getMedia(&#123;</span><br><span class=\"line\">        video: true,</span><br><span class=\"line\">        audio: true</span><br><span class=\"line\">    &#125;, function(stream) &#123;</span><br><span class=\"line\">        // 用来获取停止摄像头的方法所在的对象</span><br><span class=\"line\">        // 这个写法其实是兼容了&lt;在旧版本中可以直接通过调用`MediaStream.stop()` 来关闭摄像头，不过在新版之中已废弃。需要使用`MediaStream.getTracks()[index].stop()` 来关闭相应的Track&gt;</span><br><span class=\"line\">        mediaStreamTrack = typeof stream.stop === &apos;function&apos; ? stream : stream.getTracks()[1]; </span><br><span class=\"line\"></span><br><span class=\"line\">        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class=\"line\">        videoEle.play();</span><br><span class=\"line\">    &#125;, function(err) &#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>getUserMedia参数说明</p>\n<ol>\n<li>第一个参数中指示需要使用视频（video）或音频（audio）</li>\n<li>第二个参数调用成功后的回调,其中带一个参数（MediaStream）。在旧版本中可以直接通过调用<code>MediaStream.stop()</code> 来关闭摄像头，不过在新版之中已废弃。需要使用<code>MediaStream.getTracks()[index].stop()</code> 来关闭相应的Track<br>比如：新版中关闭video则根据第一个参数index=0,使用MediaStream.getTracks()[0].stop()</li>\n</ol>\n</blockquote>\n<ol start=\"3\">\n<li>第三个参数指示调用失败后的回调</li>\n</ol>\n<h4 id=\"新版本位于navigator-mediaDevices-对象下\"><a href=\"#新版本位于navigator-mediaDevices-对象下\" class=\"headerlink\" title=\"- 新版本位于navigator.mediaDevices 对象下\"></a>- 新版本位于navigator.mediaDevices 对象下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMeida)&#123;</span><br><span class=\"line\">    navigator.mediaDevices.getUserMeida(&#123;</span><br><span class=\"line\">        video: true,</span><br><span class=\"line\">        audio: true</span><br><span class=\"line\">    &#125;).then(function(stream) &#123;</span><br><span class=\"line\">        mediaStreamTrack = typeof stream.stop === &apos;function&apos; ? stream : stream.getTracks()[1];</span><br><span class=\"line\">        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class=\"line\">        videoEle.play();</span><br><span class=\"line\">    &#125;).catch(function(err) &#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与旧版类似，不过该方法返回了一个Promise对象，可以使用then和catch表示成功与失败的回调</p>\n<p><strong>另外</strong>，需要注意的是，MediaStream.getTracks() 返回的Tracks数组是按第一个参数倒序排列的</p>\n<p>比如现在定义了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    video: true,</span><br><span class=\"line\">    audio: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>想关闭摄像头，就需要调用MediaStream.getTracks()[1].stop();</p>\n<p>同理，0对应于audio的track</p>\n<h3 id=\"2-摄像头操作\"><a href=\"#2-摄像头操作\" class=\"headerlink\" title=\"2. 摄像头操作\"></a>2. 摄像头操作</h3><h4 id=\"0-首先初始化画布\"><a href=\"#0-首先初始化画布\" class=\"headerlink\" title=\"0. 首先初始化画布\"></a>0. 首先初始化画布</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var context = canvas.getContext(&quot;2d&quot;); </span><br><span class=\"line\">var canvesEle = document.getElementById(&quot;canves&quot;);</span><br><span class=\"line\">var videoEle = document.getElementById(&quot;video&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-拍照\"><a href=\"#1-拍照\" class=\"headerlink\" title=\"1. 拍照\"></a>1. 拍照</h4><p>document.getElementById(“snap”).addEventListener(‘click’, function(e){<br>    context.drawImage(videoEle, 0, 0, 500, 400);<br>})</p>\n<h4 id=\"2-关闭摄像头\"><a href=\"#2-关闭摄像头\" class=\"headerlink\" title=\"2. 关闭摄像头\"></a>2. 关闭摄像头</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 关闭摄像头</span><br><span class=\"line\">close.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">    mediaStreamTrack &amp;&amp; mediaStreamTrack.stop();</span><br><span class=\"line\">&#125;, false);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-图像上传获取\"><a href=\"#3-图像上传获取\" class=\"headerlink\" title=\"3. 图像上传获取\"></a>3. 图像上传获取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.toDataURL(&apos;image/png&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整js\"><a href=\"#完整js\" class=\"headerlink\" title=\"完整js\"></a>完整js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    function $(elem) &#123;</span><br><span class=\"line\">        return document.querySelector(elem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 获取媒体方法（旧方法）</span><br><span class=\"line\">    navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;</span><br><span class=\"line\"></span><br><span class=\"line\">    var canvas = $(&apos;canvas&apos;),</span><br><span class=\"line\">        context = canvas.getContext(&apos;2d&apos;),</span><br><span class=\"line\">        video = $(&apos;video&apos;),</span><br><span class=\"line\">        snap = $(&apos;#snap&apos;),</span><br><span class=\"line\">        close = $(&apos;#close&apos;),</span><br><span class=\"line\">        upload = $(&apos;#upload&apos;),</span><br><span class=\"line\">        uploaded = $(&apos;#uploaded&apos;),</span><br><span class=\"line\">        mediaStreamTrack;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 获取媒体方法（新方法）</span><br><span class=\"line\">    // 使用新方法打开摄像头</span><br><span class=\"line\">    if (navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span><br><span class=\"line\">        navigator.mediaDevices.getUserMedia(&#123;</span><br><span class=\"line\">            video: true,</span><br><span class=\"line\">            audio: true</span><br><span class=\"line\">        &#125;).then(function(stream) &#123;</span><br><span class=\"line\">            console.log(stream);</span><br><span class=\"line\"></span><br><span class=\"line\">            mediaStreamTrack = typeof stream.stop === &apos;function&apos; ? stream : stream.getTracks()[1];</span><br><span class=\"line\"></span><br><span class=\"line\">            video.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class=\"line\">            video.play();</span><br><span class=\"line\">        &#125;).catch(function(err) &#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 使用旧方法打开摄像头</span><br><span class=\"line\">    else if (navigator.getMedia) &#123;</span><br><span class=\"line\">        navigator.getMedia(&#123;</span><br><span class=\"line\">            video: true</span><br><span class=\"line\">        &#125;, function(stream) &#123;</span><br><span class=\"line\">            mediaStreamTrack = stream.getTracks()[0];</span><br><span class=\"line\"></span><br><span class=\"line\">            video.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class=\"line\">            video.play();</span><br><span class=\"line\">        &#125;, function(err) &#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 截取图像</span><br><span class=\"line\">    snap.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        context.drawImage(video, 0, 0, 500, 400);</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 关闭摄像头</span><br><span class=\"line\">    close.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        mediaStreamTrack &amp;&amp; mediaStreamTrack.stop();</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 上传截取的图像</span><br><span class=\"line\">    upload.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        jQuery.post(&apos;/uploadSnap.php&apos;, &#123;</span><br><span class=\"line\">            snapData: canvas.toDataURL(&apos;image/png&apos;)</span><br><span class=\"line\">        &#125;).done(function(rs) &#123;</span><br><span class=\"line\">            rs = JSON.parse(rs);</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(rs);</span><br><span class=\"line\"></span><br><span class=\"line\">            uploaded.src = rs.path;</span><br><span class=\"line\">        &#125;).fail(function(err) &#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://caniuse.com/#search=getUserMedia\" target=\"_blank\" rel=\"noopener\">getUserMedia支持情况-不容乐观：点击查看</a></p>\n"},{"title":"sessionStorage移动端兼容问题","abbrlink":"87feece5","date":"2018-09-13T03:37:45.000Z","_content":"\n# 关于sessionStorage的移动端兼容问题\n最近在开发移动端项目时，需要用到的本地存储的地方不少。都是一些只要记住当前打开窗口的用户数据就行，所以我选择用的sessionStorage。使用场景如下：\n\n> A.html页面需要记录一条数据{a:1,b:2};\n```\nsessionStorage.setItem(\"data\",\"{a:1,b:2}\");\n```\n> B.html页面取出使用;\n\n`sessionStorage.getItem(\"data\"); // 获取结果为null`\n\n问题：如果项目不是单页面复应用，AB是两个html文件，需要跳转href的。我们会发现有些Andiron系统的浏览器在B页获取是到的结果是null (如：vivo手机自带的世界之窗浏览器)。\n\n经过分析，其实这并不是这个浏览器不支持sessionStorage，因为你还是能获取到sessionStorage这个对象的。而是**因为sessionStorage是一个当前窗口的数据存储格式，有些浏览器在跳转新页面的时候他系统是打开了一个新的webView，把原来的关了,也就相当于我们在浏览器打开了一个新窗口。这样他就跟我们的sessionStorage原理冲突了，在新页面当然就获取不到咯。**  所以建议大家做移动端的时候如果不是单页面复应用的的项目最好不要使用sessionStorage。慎用！\n\n\n## sessionStorage 的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开\n\n一直以来，我所以为的 sessionStorage 的生命周期是这样的：在 sessionStorage 中存储的数据会在当前浏览器的同一网站的多个标签页中共享，并在此网站的最后一个标签页被关闭后清除。注意：这是错误的。\n\n我之所以会这么认为，是因为我写代码的时候，sessionStorage 给我的表现就是这样的。\n\n假设我们有一个 index.html：\n\n```\n<!-- 使用一个新标签页打开自身，并设置一个 sessionStorage -->\n<a href=\"index.html\" target=\"_blank\" onclick=\"sessionStorage.setItem('j', 's')\">\n  open myself\n</a>\n```\n\n接下来：\n\n1. 在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 `http://localhost/index.html`\n2. 点击页面上的链接，此时会弹出来标签页 B。\n3. 在标签页 B 中打开控制台并执行 sessionStorage.getItem('j')\n控制台会输出 's'，这说明标签页 A 和 B 共享了 sessionStorage 中的数据；接下来，先关闭这两个标签页，然后再打开一个标签页 C，再读取一下 j 的值，得到的是 null。\n\n这看起来跟本文一开始的说法是一致的，但今天我遇到了一个奇怪的事情……\n\n我们给上面的步骤添加第四步：\n\n1. 在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 http://localhost/index.html\n2. 点击页面上的链接，此时会弹出来标签页 B。\n3. 在标签页 B 中打开控制台并执行 sessionStorage.getItem('j')，得到 's'\n4. 新建一个新标签页 D，然后在地址栏内输入 http://localhost/index.html 打开同样的页面， 然后执行 sessionStorage.getItem('j') 。\n\n按照我的预期，标签页 D 得到的应该还是 's'，毕竟我认为 sessionStorage 的数据是在同一网站的多个标签页之间共享的。但是我错了，得到的结果是 null。\n\n发生了什么？为什么标签页 B 中得到的是 's'，为什么标签页 D 中却是 null？\n\n细心的同学可能已经发现了，**标签页 B 和标签页 D 之间唯一的不同就是它们被打开的方式：标签页 B 是通过在标签页 A 中点击链接打开的，但标签页 D 是在浏览器地址栏输入地址打开的。**\n\n我赶紧上 MDN 查了一下，上面是这么说的：\n\n> ...data stored in sessionStorage gets cleared when the page session ends...Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.\n\n所以现在我明白了：通过点击链接（或者用了 window.open）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。","source":"_posts/sessionStorage移动端兼容问题.md","raw":"---\ntitle: sessionStorage移动端兼容问题\ntags:\n  - JS\nabbrlink: 87feece5\ndate: 2018-09-13 11:37:45\n---\n\n# 关于sessionStorage的移动端兼容问题\n最近在开发移动端项目时，需要用到的本地存储的地方不少。都是一些只要记住当前打开窗口的用户数据就行，所以我选择用的sessionStorage。使用场景如下：\n\n> A.html页面需要记录一条数据{a:1,b:2};\n```\nsessionStorage.setItem(\"data\",\"{a:1,b:2}\");\n```\n> B.html页面取出使用;\n\n`sessionStorage.getItem(\"data\"); // 获取结果为null`\n\n问题：如果项目不是单页面复应用，AB是两个html文件，需要跳转href的。我们会发现有些Andiron系统的浏览器在B页获取是到的结果是null (如：vivo手机自带的世界之窗浏览器)。\n\n经过分析，其实这并不是这个浏览器不支持sessionStorage，因为你还是能获取到sessionStorage这个对象的。而是**因为sessionStorage是一个当前窗口的数据存储格式，有些浏览器在跳转新页面的时候他系统是打开了一个新的webView，把原来的关了,也就相当于我们在浏览器打开了一个新窗口。这样他就跟我们的sessionStorage原理冲突了，在新页面当然就获取不到咯。**  所以建议大家做移动端的时候如果不是单页面复应用的的项目最好不要使用sessionStorage。慎用！\n\n\n## sessionStorage 的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开\n\n一直以来，我所以为的 sessionStorage 的生命周期是这样的：在 sessionStorage 中存储的数据会在当前浏览器的同一网站的多个标签页中共享，并在此网站的最后一个标签页被关闭后清除。注意：这是错误的。\n\n我之所以会这么认为，是因为我写代码的时候，sessionStorage 给我的表现就是这样的。\n\n假设我们有一个 index.html：\n\n```\n<!-- 使用一个新标签页打开自身，并设置一个 sessionStorage -->\n<a href=\"index.html\" target=\"_blank\" onclick=\"sessionStorage.setItem('j', 's')\">\n  open myself\n</a>\n```\n\n接下来：\n\n1. 在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 `http://localhost/index.html`\n2. 点击页面上的链接，此时会弹出来标签页 B。\n3. 在标签页 B 中打开控制台并执行 sessionStorage.getItem('j')\n控制台会输出 's'，这说明标签页 A 和 B 共享了 sessionStorage 中的数据；接下来，先关闭这两个标签页，然后再打开一个标签页 C，再读取一下 j 的值，得到的是 null。\n\n这看起来跟本文一开始的说法是一致的，但今天我遇到了一个奇怪的事情……\n\n我们给上面的步骤添加第四步：\n\n1. 在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 http://localhost/index.html\n2. 点击页面上的链接，此时会弹出来标签页 B。\n3. 在标签页 B 中打开控制台并执行 sessionStorage.getItem('j')，得到 's'\n4. 新建一个新标签页 D，然后在地址栏内输入 http://localhost/index.html 打开同样的页面， 然后执行 sessionStorage.getItem('j') 。\n\n按照我的预期，标签页 D 得到的应该还是 's'，毕竟我认为 sessionStorage 的数据是在同一网站的多个标签页之间共享的。但是我错了，得到的结果是 null。\n\n发生了什么？为什么标签页 B 中得到的是 's'，为什么标签页 D 中却是 null？\n\n细心的同学可能已经发现了，**标签页 B 和标签页 D 之间唯一的不同就是它们被打开的方式：标签页 B 是通过在标签页 A 中点击链接打开的，但标签页 D 是在浏览器地址栏输入地址打开的。**\n\n我赶紧上 MDN 查了一下，上面是这么说的：\n\n> ...data stored in sessionStorage gets cleared when the page session ends...Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.\n\n所以现在我明白了：通过点击链接（或者用了 window.open）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。","slug":"sessionStorage移动端兼容问题","published":1,"updated":"2018-09-16T00:35:05.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4gn3zp0005vkjg7dxda0b2","content":"<h1 id=\"关于sessionStorage的移动端兼容问题\"><a href=\"#关于sessionStorage的移动端兼容问题\" class=\"headerlink\" title=\"关于sessionStorage的移动端兼容问题\"></a>关于sessionStorage的移动端兼容问题</h1><p>最近在开发移动端项目时，需要用到的本地存储的地方不少。都是一些只要记住当前打开窗口的用户数据就行，所以我选择用的sessionStorage。使用场景如下：</p>\n<blockquote>\n<p>A.html页面需要记录一条数据{a:1,b:2};<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sessionStorage.setItem(&quot;data&quot;,&quot;&#123;a:1,b:2&#125;&quot;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>B.html页面取出使用;</p>\n</blockquote>\n<p><code>sessionStorage.getItem(&quot;data&quot;); // 获取结果为null</code></p>\n<p>问题：如果项目不是单页面复应用，AB是两个html文件，需要跳转href的。我们会发现有些Andiron系统的浏览器在B页获取是到的结果是null (如：vivo手机自带的世界之窗浏览器)。</p>\n<p>经过分析，其实这并不是这个浏览器不支持sessionStorage，因为你还是能获取到sessionStorage这个对象的。而是<strong>因为sessionStorage是一个当前窗口的数据存储格式，有些浏览器在跳转新页面的时候他系统是打开了一个新的webView，把原来的关了,也就相当于我们在浏览器打开了一个新窗口。这样他就跟我们的sessionStorage原理冲突了，在新页面当然就获取不到咯。</strong>  所以建议大家做移动端的时候如果不是单页面复应用的的项目最好不要使用sessionStorage。慎用！</p>\n<h2 id=\"sessionStorage-的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开\"><a href=\"#sessionStorage-的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开\" class=\"headerlink\" title=\"sessionStorage 的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开\"></a>sessionStorage 的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开</h2><p>一直以来，我所以为的 sessionStorage 的生命周期是这样的：在 sessionStorage 中存储的数据会在当前浏览器的同一网站的多个标签页中共享，并在此网站的最后一个标签页被关闭后清除。注意：这是错误的。</p>\n<p>我之所以会这么认为，是因为我写代码的时候，sessionStorage 给我的表现就是这样的。</p>\n<p>假设我们有一个 index.html：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 使用一个新标签页打开自身，并设置一个 sessionStorage --&gt;</span><br><span class=\"line\">&lt;a href=&quot;index.html&quot; target=&quot;_blank&quot; onclick=&quot;sessionStorage.setItem(&apos;j&apos;, &apos;s&apos;)&quot;&gt;</span><br><span class=\"line\">  open myself</span><br><span class=\"line\">&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>接下来：</p>\n<ol>\n<li>在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 <code>http://localhost/index.html</code></li>\n<li>点击页面上的链接，此时会弹出来标签页 B。</li>\n<li>在标签页 B 中打开控制台并执行 sessionStorage.getItem(‘j’)<br>控制台会输出 ‘s’，这说明标签页 A 和 B 共享了 sessionStorage 中的数据；接下来，先关闭这两个标签页，然后再打开一个标签页 C，再读取一下 j 的值，得到的是 null。</li>\n</ol>\n<p>这看起来跟本文一开始的说法是一致的，但今天我遇到了一个奇怪的事情……</p>\n<p>我们给上面的步骤添加第四步：</p>\n<ol>\n<li>在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 <a href=\"http://localhost/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost/index.html</a></li>\n<li>点击页面上的链接，此时会弹出来标签页 B。</li>\n<li>在标签页 B 中打开控制台并执行 sessionStorage.getItem(‘j’)，得到 ‘s’</li>\n<li>新建一个新标签页 D，然后在地址栏内输入 <a href=\"http://localhost/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost/index.html</a> 打开同样的页面， 然后执行 sessionStorage.getItem(‘j’) 。</li>\n</ol>\n<p>按照我的预期，标签页 D 得到的应该还是 ‘s’，毕竟我认为 sessionStorage 的数据是在同一网站的多个标签页之间共享的。但是我错了，得到的结果是 null。</p>\n<p>发生了什么？为什么标签页 B 中得到的是 ‘s’，为什么标签页 D 中却是 null？</p>\n<p>细心的同学可能已经发现了，<strong>标签页 B 和标签页 D 之间唯一的不同就是它们被打开的方式：标签页 B 是通过在标签页 A 中点击链接打开的，但标签页 D 是在浏览器地址栏输入地址打开的。</strong></p>\n<p>我赶紧上 MDN 查了一下，上面是这么说的：</p>\n<blockquote>\n<p>…data stored in sessionStorage gets cleared when the page session ends…Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.</p>\n</blockquote>\n<p>所以现在我明白了：通过点击链接（或者用了 window.open）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于sessionStorage的移动端兼容问题\"><a href=\"#关于sessionStorage的移动端兼容问题\" class=\"headerlink\" title=\"关于sessionStorage的移动端兼容问题\"></a>关于sessionStorage的移动端兼容问题</h1><p>最近在开发移动端项目时，需要用到的本地存储的地方不少。都是一些只要记住当前打开窗口的用户数据就行，所以我选择用的sessionStorage。使用场景如下：</p>\n<blockquote>\n<p>A.html页面需要记录一条数据{a:1,b:2};<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sessionStorage.setItem(&quot;data&quot;,&quot;&#123;a:1,b:2&#125;&quot;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>B.html页面取出使用;</p>\n</blockquote>\n<p><code>sessionStorage.getItem(&quot;data&quot;); // 获取结果为null</code></p>\n<p>问题：如果项目不是单页面复应用，AB是两个html文件，需要跳转href的。我们会发现有些Andiron系统的浏览器在B页获取是到的结果是null (如：vivo手机自带的世界之窗浏览器)。</p>\n<p>经过分析，其实这并不是这个浏览器不支持sessionStorage，因为你还是能获取到sessionStorage这个对象的。而是<strong>因为sessionStorage是一个当前窗口的数据存储格式，有些浏览器在跳转新页面的时候他系统是打开了一个新的webView，把原来的关了,也就相当于我们在浏览器打开了一个新窗口。这样他就跟我们的sessionStorage原理冲突了，在新页面当然就获取不到咯。</strong>  所以建议大家做移动端的时候如果不是单页面复应用的的项目最好不要使用sessionStorage。慎用！</p>\n<h2 id=\"sessionStorage-的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开\"><a href=\"#sessionStorage-的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开\" class=\"headerlink\" title=\"sessionStorage 的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开\"></a>sessionStorage 的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开</h2><p>一直以来，我所以为的 sessionStorage 的生命周期是这样的：在 sessionStorage 中存储的数据会在当前浏览器的同一网站的多个标签页中共享，并在此网站的最后一个标签页被关闭后清除。注意：这是错误的。</p>\n<p>我之所以会这么认为，是因为我写代码的时候，sessionStorage 给我的表现就是这样的。</p>\n<p>假设我们有一个 index.html：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 使用一个新标签页打开自身，并设置一个 sessionStorage --&gt;</span><br><span class=\"line\">&lt;a href=&quot;index.html&quot; target=&quot;_blank&quot; onclick=&quot;sessionStorage.setItem(&apos;j&apos;, &apos;s&apos;)&quot;&gt;</span><br><span class=\"line\">  open myself</span><br><span class=\"line\">&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>接下来：</p>\n<ol>\n<li>在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 <code>http://localhost/index.html</code></li>\n<li>点击页面上的链接，此时会弹出来标签页 B。</li>\n<li>在标签页 B 中打开控制台并执行 sessionStorage.getItem(‘j’)<br>控制台会输出 ‘s’，这说明标签页 A 和 B 共享了 sessionStorage 中的数据；接下来，先关闭这两个标签页，然后再打开一个标签页 C，再读取一下 j 的值，得到的是 null。</li>\n</ol>\n<p>这看起来跟本文一开始的说法是一致的，但今天我遇到了一个奇怪的事情……</p>\n<p>我们给上面的步骤添加第四步：</p>\n<ol>\n<li>在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 <a href=\"http://localhost/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost/index.html</a></li>\n<li>点击页面上的链接，此时会弹出来标签页 B。</li>\n<li>在标签页 B 中打开控制台并执行 sessionStorage.getItem(‘j’)，得到 ‘s’</li>\n<li>新建一个新标签页 D，然后在地址栏内输入 <a href=\"http://localhost/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost/index.html</a> 打开同样的页面， 然后执行 sessionStorage.getItem(‘j’) 。</li>\n</ol>\n<p>按照我的预期，标签页 D 得到的应该还是 ‘s’，毕竟我认为 sessionStorage 的数据是在同一网站的多个标签页之间共享的。但是我错了，得到的结果是 null。</p>\n<p>发生了什么？为什么标签页 B 中得到的是 ‘s’，为什么标签页 D 中却是 null？</p>\n<p>细心的同学可能已经发现了，<strong>标签页 B 和标签页 D 之间唯一的不同就是它们被打开的方式：标签页 B 是通过在标签页 A 中点击链接打开的，但标签页 D 是在浏览器地址栏输入地址打开的。</strong></p>\n<p>我赶紧上 MDN 查了一下，上面是这么说的：</p>\n<blockquote>\n<p>…data stored in sessionStorage gets cleared when the page session ends…Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.</p>\n</blockquote>\n<p>所以现在我明白了：通过点击链接（或者用了 window.open）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。</p>\n"},{"title":"window.requestAnimationFrame使用","abbrlink":"6ff4728c","date":"2018-06-26T13:40:56.000Z","_content":"## 先看MDN文档：\n\nwindow.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。\n\n> 注意：若您想要在下次重绘时产生另一个动画画面，您的回调例程必须调用 requestAnimationFrame()。\n\n当你需要更新屏幕画面时就可以调用此方法。在浏览器下次重绘前执行回调函数。回调的次数通常是每秒60次，但大多数浏览器通常匹配 W3C 所建议的刷新频率。在大多数浏览器里，当运行在后台标签页或者隐藏的&lt;iframe&gt; 里时，requestAnimationFrame() 会暂停调用以提升性能和电池寿命。\n\n回调函数会被传入一个参数，DOMHighResTimeStamp，指示当前被 requestAnimationFrame() 排序的回调函数被触发的时间。即使每个回调函数的工作量的计算都花了时间，单个帧中的多个回调也都将被传入相同的时间戳。该时间戳是一个十进制数，单位毫秒，最小精度为1ms(1000μs)。   \n\n## 语法\n\n```\nwindow.requestAnimationFrame(callback)\n```\n\n> 参数\n\ncallback   \n一个指定函数的参数，该函数在下次重新绘制动画时调用。这个回调函数`只有一个传参`，`DOMHighResTimeStamp`，指示`requestAnimationFrame()` 开始触发回调函数的当前时间（`performance.now()` 返回的时间）。\n\n> 返回值\n\n一个 `long` 整数，请求 ID ，是回调列表中`唯一的标识`。是个非零值，没别的意义。你可以传这个值给 `window.cancelAnimationFrame()` 以取消回调函数。\n\n\n比如： 写一个进度条\n> html\n```\n<div id=\"requestAnimationFrame-test\" style=\"width: 1px;height: 18px;background: #666;\">0%</div>\n<button onclick=\"run()\">Run</button>\n```\n\n> javascript\n```\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame\nvar start = 0;\nvar ele = document.getElementById('requestAnimationFrame-test');\nvar progress = 0\n\nfunction step(timestamp) {\n    progress += 1;\n    ele.style.width = progress+'%';\n    ele.innerHTML = progress+'%';\n    if(progress < 100) {\n        requestAnimationFrame(step)\n    }\n}\n\nfunction run() {\n    ele.style.width = \"1px\";\n    progress = 0;\n    requestAnimationFrame(step);\n}\n```\n\n\ndemo: [点击查看](https://sansanshow.github.io/fe-notes/examples/html/requestAnimationFrame.html)\n\n","source":"_posts/window-requestAnimationFrame使用.md","raw":"---\ntitle: window.requestAnimationFrame使用\ntags:\n  - JS\nabbrlink: 6ff4728c\ndate: 2018-06-26 21:40:56\n---\n## 先看MDN文档：\n\nwindow.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。\n\n> 注意：若您想要在下次重绘时产生另一个动画画面，您的回调例程必须调用 requestAnimationFrame()。\n\n当你需要更新屏幕画面时就可以调用此方法。在浏览器下次重绘前执行回调函数。回调的次数通常是每秒60次，但大多数浏览器通常匹配 W3C 所建议的刷新频率。在大多数浏览器里，当运行在后台标签页或者隐藏的&lt;iframe&gt; 里时，requestAnimationFrame() 会暂停调用以提升性能和电池寿命。\n\n回调函数会被传入一个参数，DOMHighResTimeStamp，指示当前被 requestAnimationFrame() 排序的回调函数被触发的时间。即使每个回调函数的工作量的计算都花了时间，单个帧中的多个回调也都将被传入相同的时间戳。该时间戳是一个十进制数，单位毫秒，最小精度为1ms(1000μs)。   \n\n## 语法\n\n```\nwindow.requestAnimationFrame(callback)\n```\n\n> 参数\n\ncallback   \n一个指定函数的参数，该函数在下次重新绘制动画时调用。这个回调函数`只有一个传参`，`DOMHighResTimeStamp`，指示`requestAnimationFrame()` 开始触发回调函数的当前时间（`performance.now()` 返回的时间）。\n\n> 返回值\n\n一个 `long` 整数，请求 ID ，是回调列表中`唯一的标识`。是个非零值，没别的意义。你可以传这个值给 `window.cancelAnimationFrame()` 以取消回调函数。\n\n\n比如： 写一个进度条\n> html\n```\n<div id=\"requestAnimationFrame-test\" style=\"width: 1px;height: 18px;background: #666;\">0%</div>\n<button onclick=\"run()\">Run</button>\n```\n\n> javascript\n```\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame\nvar start = 0;\nvar ele = document.getElementById('requestAnimationFrame-test');\nvar progress = 0\n\nfunction step(timestamp) {\n    progress += 1;\n    ele.style.width = progress+'%';\n    ele.innerHTML = progress+'%';\n    if(progress < 100) {\n        requestAnimationFrame(step)\n    }\n}\n\nfunction run() {\n    ele.style.width = \"1px\";\n    progress = 0;\n    requestAnimationFrame(step);\n}\n```\n\n\ndemo: [点击查看](https://sansanshow.github.io/fe-notes/examples/html/requestAnimationFrame.html)\n\n","slug":"window-requestAnimationFrame使用","published":1,"updated":"2018-09-16T00:35:05.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4gn3zq0006vkjgkul3v8db","content":"<h2 id=\"先看MDN文档：\"><a href=\"#先看MDN文档：\" class=\"headerlink\" title=\"先看MDN文档：\"></a>先看MDN文档：</h2><p>window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。</p>\n<blockquote>\n<p>注意：若您想要在下次重绘时产生另一个动画画面，您的回调例程必须调用 requestAnimationFrame()。</p>\n</blockquote>\n<p>当你需要更新屏幕画面时就可以调用此方法。在浏览器下次重绘前执行回调函数。回调的次数通常是每秒60次，但大多数浏览器通常匹配 W3C 所建议的刷新频率。在大多数浏览器里，当运行在后台标签页或者隐藏的&lt;iframe&gt; 里时，requestAnimationFrame() 会暂停调用以提升性能和电池寿命。</p>\n<p>回调函数会被传入一个参数，DOMHighResTimeStamp，指示当前被 requestAnimationFrame() 排序的回调函数被触发的时间。即使每个回调函数的工作量的计算都花了时间，单个帧中的多个回调也都将被传入相同的时间戳。该时间戳是一个十进制数，单位毫秒，最小精度为1ms(1000μs)。   </p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.requestAnimationFrame(callback)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数</p>\n</blockquote>\n<p>callback<br>一个指定函数的参数，该函数在下次重新绘制动画时调用。这个回调函数<code>只有一个传参</code>，<code>DOMHighResTimeStamp</code>，指示<code>requestAnimationFrame()</code> 开始触发回调函数的当前时间（<code>performance.now()</code> 返回的时间）。</p>\n<blockquote>\n<p>返回值</p>\n</blockquote>\n<p>一个 <code>long</code> 整数，请求 ID ，是回调列表中<code>唯一的标识</code>。是个非零值，没别的意义。你可以传这个值给 <code>window.cancelAnimationFrame()</code> 以取消回调函数。</p>\n<p>比如： 写一个进度条</p>\n<blockquote>\n<p>html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;requestAnimationFrame-test&quot; style=&quot;width: 1px;height: 18px;background: #666;&quot;&gt;0%&lt;/div&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;run()&quot;&gt;Run&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>javascript<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame</span><br><span class=\"line\">var start = 0;</span><br><span class=\"line\">var ele = document.getElementById(&apos;requestAnimationFrame-test&apos;);</span><br><span class=\"line\">var progress = 0</span><br><span class=\"line\"></span><br><span class=\"line\">function step(timestamp) &#123;</span><br><span class=\"line\">    progress += 1;</span><br><span class=\"line\">    ele.style.width = progress+&apos;%&apos;;</span><br><span class=\"line\">    ele.innerHTML = progress+&apos;%&apos;;</span><br><span class=\"line\">    if(progress &lt; 100) &#123;</span><br><span class=\"line\">        requestAnimationFrame(step)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function run() &#123;</span><br><span class=\"line\">    ele.style.width = &quot;1px&quot;;</span><br><span class=\"line\">    progress = 0;</span><br><span class=\"line\">    requestAnimationFrame(step);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>demo: <a href=\"https://sansanshow.github.io/fe-notes/examples/html/requestAnimationFrame.html\" target=\"_blank\" rel=\"noopener\">点击查看</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"先看MDN文档：\"><a href=\"#先看MDN文档：\" class=\"headerlink\" title=\"先看MDN文档：\"></a>先看MDN文档：</h2><p>window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。</p>\n<blockquote>\n<p>注意：若您想要在下次重绘时产生另一个动画画面，您的回调例程必须调用 requestAnimationFrame()。</p>\n</blockquote>\n<p>当你需要更新屏幕画面时就可以调用此方法。在浏览器下次重绘前执行回调函数。回调的次数通常是每秒60次，但大多数浏览器通常匹配 W3C 所建议的刷新频率。在大多数浏览器里，当运行在后台标签页或者隐藏的&lt;iframe&gt; 里时，requestAnimationFrame() 会暂停调用以提升性能和电池寿命。</p>\n<p>回调函数会被传入一个参数，DOMHighResTimeStamp，指示当前被 requestAnimationFrame() 排序的回调函数被触发的时间。即使每个回调函数的工作量的计算都花了时间，单个帧中的多个回调也都将被传入相同的时间戳。该时间戳是一个十进制数，单位毫秒，最小精度为1ms(1000μs)。   </p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.requestAnimationFrame(callback)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数</p>\n</blockquote>\n<p>callback<br>一个指定函数的参数，该函数在下次重新绘制动画时调用。这个回调函数<code>只有一个传参</code>，<code>DOMHighResTimeStamp</code>，指示<code>requestAnimationFrame()</code> 开始触发回调函数的当前时间（<code>performance.now()</code> 返回的时间）。</p>\n<blockquote>\n<p>返回值</p>\n</blockquote>\n<p>一个 <code>long</code> 整数，请求 ID ，是回调列表中<code>唯一的标识</code>。是个非零值，没别的意义。你可以传这个值给 <code>window.cancelAnimationFrame()</code> 以取消回调函数。</p>\n<p>比如： 写一个进度条</p>\n<blockquote>\n<p>html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;requestAnimationFrame-test&quot; style=&quot;width: 1px;height: 18px;background: #666;&quot;&gt;0%&lt;/div&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;run()&quot;&gt;Run&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>javascript<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame</span><br><span class=\"line\">var start = 0;</span><br><span class=\"line\">var ele = document.getElementById(&apos;requestAnimationFrame-test&apos;);</span><br><span class=\"line\">var progress = 0</span><br><span class=\"line\"></span><br><span class=\"line\">function step(timestamp) &#123;</span><br><span class=\"line\">    progress += 1;</span><br><span class=\"line\">    ele.style.width = progress+&apos;%&apos;;</span><br><span class=\"line\">    ele.innerHTML = progress+&apos;%&apos;;</span><br><span class=\"line\">    if(progress &lt; 100) &#123;</span><br><span class=\"line\">        requestAnimationFrame(step)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function run() &#123;</span><br><span class=\"line\">    ele.style.width = &quot;1px&quot;;</span><br><span class=\"line\">    progress = 0;</span><br><span class=\"line\">    requestAnimationFrame(step);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>demo: <a href=\"https://sansanshow.github.io/fe-notes/examples/html/requestAnimationFrame.html\" target=\"_blank\" rel=\"noopener\">点击查看</a></p>\n"},{"title":"实现跨域请求的几种方式","abbrlink":"a27e515f","date":"2018-07-03T10:43:01.000Z","_content":"## 同源策略\n> 基本概念\n### 源（origin）就是协议、域名和端口号。\nhttp://www.company.com:80   \n协议：http\n域名：www.company.com\n端口号：80\n\n### 同源策略\n同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。\n\n> 不受同源策略限制的：\n1. 页面中的链接，重定向以及表单提交是不会受到同源策略限制的。\n2. 跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的`<script src=\"...\"></script>，<img>，<link>，<iframe>`等。\n\n## 跨域的实现\n### 1. 图片ping或script标签跨域\n```\n// 图片ping\nfunction imgPing(url) {\n    var img = new Image();\n    img.src = url;\n    img.onload = function () {\n        console.log(`img-url:${url}...success`)\n    }\n    img.onerror = function () {\n        console.error(`img-url:${url}...faild`)\n    }\n}\n\n\n//script标签跨域\n\n```\n\n图片ping常用于跟踪用户点击页面或动态广告曝光次数。 \nscript标签可以得到从其他来源数据，这也是JSONP依赖的根据。 \n> 缺点：只能发送Get请求 ，无法访问服务器的响应文本（单向请求）\n\n### 2. JSONP跨域\n```\nfunction addScriptTag(src) { \n    var script = document.createElement('script'); \n    script.setAttribute(\"type\",\"text/javascript\"); \n    script.src = src; \n    document.body.appendChild(script);\n}\n\n//window.onload是为了让页面加载完成后再执行\nwindow.onload = function () { \n    addScriptTag('http://b.com/main.js?callback=foo');\n} \n\nfunction foo(data) { \n    console.log(data.name+\"欢迎您\");\n}\n```\n采用jsonp跨域也存在问题：\n1.\t使用这种方法，只要是个网站都可以拿到b.com里的数据，存在安全性问题。`需要网站双方商议基础token的身份验证，这里不详述`。\n2.\t只能是GET，不能POST。\n3.\t可能被注入恶意代码，篡改页面内容，可以采用字符串过滤来规避此问题。\n\n### 3. CORS\n​ Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，` CORS `除了` GET `要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：\n```\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Max-Age: 86400\n```\n\n### 4. window.name+iframe\n`window.name`通过在`iframe`（一般动态创建）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给`window.name`。然后，请求者可以检索`window.name`值作为响应。\n\n    - iframe标签的跨域能力；\n    - window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。\n每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回<iframe>元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。\n\n### 5. window.postMessage()\n\nHTML5新特性，可以用来向其他所有的` window `对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送` MessageEvent`，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。\n\n### 6. 修改document.domain跨子域\n\n**前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域**\n\n​ 在根域范围内，允许把domain属性的值设置为它的上一级域。例如，在`”aaa.xxx.com”`域内，可以把`domain`设置为` “xxx.com” `但不能设置为 `“xxx.org” `或者`”com”`。\n\n​ 现在存在两个域名`aaa.xxx.com`和`bbb.xxx.com`。在aaa下嵌入bbb的页面，由于其document.name不一致，无法在aaa下操作bbb的js。可以在aaa和bbb下通过js将`document.name = 'xxx.com'`;设置一致，来达到互相访问的作用。\n\n### 7. websocket\nWebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时`允许跨域通讯`\n\n**需要注意：**WebSocket对象不支持DOM 2级事件侦听器，必须使用DOM 0级语法分别定义各个事件。\n\n### 8. 代理\n\n同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题\n\nDomainA客户端（浏览器） ==> DomainA服务器 ==> DomainB服务器 ==> DomainA客户端（浏览器）","source":"_posts/实现跨域请求的几种方式.md","raw":"---\ntitle: 实现跨域请求的几种方式\ntags:\n  - JSS\nabbrlink: a27e515f\ndate: 2018-07-03 18:43:01\n---\n## 同源策略\n> 基本概念\n### 源（origin）就是协议、域名和端口号。\nhttp://www.company.com:80   \n协议：http\n域名：www.company.com\n端口号：80\n\n### 同源策略\n同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。\n\n> 不受同源策略限制的：\n1. 页面中的链接，重定向以及表单提交是不会受到同源策略限制的。\n2. 跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的`<script src=\"...\"></script>，<img>，<link>，<iframe>`等。\n\n## 跨域的实现\n### 1. 图片ping或script标签跨域\n```\n// 图片ping\nfunction imgPing(url) {\n    var img = new Image();\n    img.src = url;\n    img.onload = function () {\n        console.log(`img-url:${url}...success`)\n    }\n    img.onerror = function () {\n        console.error(`img-url:${url}...faild`)\n    }\n}\n\n\n//script标签跨域\n\n```\n\n图片ping常用于跟踪用户点击页面或动态广告曝光次数。 \nscript标签可以得到从其他来源数据，这也是JSONP依赖的根据。 \n> 缺点：只能发送Get请求 ，无法访问服务器的响应文本（单向请求）\n\n### 2. JSONP跨域\n```\nfunction addScriptTag(src) { \n    var script = document.createElement('script'); \n    script.setAttribute(\"type\",\"text/javascript\"); \n    script.src = src; \n    document.body.appendChild(script);\n}\n\n//window.onload是为了让页面加载完成后再执行\nwindow.onload = function () { \n    addScriptTag('http://b.com/main.js?callback=foo');\n} \n\nfunction foo(data) { \n    console.log(data.name+\"欢迎您\");\n}\n```\n采用jsonp跨域也存在问题：\n1.\t使用这种方法，只要是个网站都可以拿到b.com里的数据，存在安全性问题。`需要网站双方商议基础token的身份验证，这里不详述`。\n2.\t只能是GET，不能POST。\n3.\t可能被注入恶意代码，篡改页面内容，可以采用字符串过滤来规避此问题。\n\n### 3. CORS\n​ Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，` CORS `除了` GET `要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：\n```\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Max-Age: 86400\n```\n\n### 4. window.name+iframe\n`window.name`通过在`iframe`（一般动态创建）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给`window.name`。然后，请求者可以检索`window.name`值作为响应。\n\n    - iframe标签的跨域能力；\n    - window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。\n每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回<iframe>元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。\n\n### 5. window.postMessage()\n\nHTML5新特性，可以用来向其他所有的` window `对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送` MessageEvent`，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。\n\n### 6. 修改document.domain跨子域\n\n**前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域**\n\n​ 在根域范围内，允许把domain属性的值设置为它的上一级域。例如，在`”aaa.xxx.com”`域内，可以把`domain`设置为` “xxx.com” `但不能设置为 `“xxx.org” `或者`”com”`。\n\n​ 现在存在两个域名`aaa.xxx.com`和`bbb.xxx.com`。在aaa下嵌入bbb的页面，由于其document.name不一致，无法在aaa下操作bbb的js。可以在aaa和bbb下通过js将`document.name = 'xxx.com'`;设置一致，来达到互相访问的作用。\n\n### 7. websocket\nWebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时`允许跨域通讯`\n\n**需要注意：**WebSocket对象不支持DOM 2级事件侦听器，必须使用DOM 0级语法分别定义各个事件。\n\n### 8. 代理\n\n同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题\n\nDomainA客户端（浏览器） ==> DomainA服务器 ==> DomainB服务器 ==> DomainA客户端（浏览器）","slug":"实现跨域请求的几种方式","published":1,"updated":"2018-09-16T00:35:05.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4gn3zr0007vkjgion0mktq","content":"<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><blockquote>\n<p>基本概念</p>\n</blockquote>\n<h3 id=\"源（origin）就是协议、域名和端口号。\"><a href=\"#源（origin）就是协议、域名和端口号。\" class=\"headerlink\" title=\"源（origin）就是协议、域名和端口号。\"></a>源（origin）就是协议、域名和端口号。</h3><p><a href=\"http://www.company.com:80\" target=\"_blank\" rel=\"noopener\">http://www.company.com:80</a><br>协议：http<br>域名：<a href=\"http://www.company.com\" target=\"_blank\" rel=\"noopener\">www.company.com</a><br>端口号：80</p>\n<h3 id=\"同源策略-1\"><a href=\"#同源策略-1\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。</p>\n<blockquote>\n<p>不受同源策略限制的：</p>\n<ol>\n<li>页面中的链接，重定向以及表单提交是不会受到同源策略限制的。</li>\n<li>跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</code>等。</li>\n</ol>\n</blockquote>\n<h2 id=\"跨域的实现\"><a href=\"#跨域的实现\" class=\"headerlink\" title=\"跨域的实现\"></a>跨域的实现</h2><h3 id=\"1-图片ping或script标签跨域\"><a href=\"#1-图片ping或script标签跨域\" class=\"headerlink\" title=\"1. 图片ping或script标签跨域\"></a>1. 图片ping或script标签跨域</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 图片ping</span><br><span class=\"line\">function imgPing(url) &#123;</span><br><span class=\"line\">    var img = new Image();</span><br><span class=\"line\">    img.src = url;</span><br><span class=\"line\">    img.onload = function () &#123;</span><br><span class=\"line\">        console.log(`img-url:$&#123;url&#125;...success`)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    img.onerror = function () &#123;</span><br><span class=\"line\">        console.error(`img-url:$&#123;url&#125;...faild`)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//script标签跨域</span><br></pre></td></tr></table></figure>\n<p>图片ping常用于跟踪用户点击页面或动态广告曝光次数。<br>script标签可以得到从其他来源数据，这也是JSONP依赖的根据。 </p>\n<blockquote>\n<p>缺点：只能发送Get请求 ，无法访问服务器的响应文本（单向请求）</p>\n</blockquote>\n<h3 id=\"2-JSONP跨域\"><a href=\"#2-JSONP跨域\" class=\"headerlink\" title=\"2. JSONP跨域\"></a>2. JSONP跨域</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addScriptTag(src) &#123; </span><br><span class=\"line\">    var script = document.createElement(&apos;script&apos;); </span><br><span class=\"line\">    script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;); </span><br><span class=\"line\">    script.src = src; </span><br><span class=\"line\">    document.body.appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//window.onload是为了让页面加载完成后再执行</span><br><span class=\"line\">window.onload = function () &#123; </span><br><span class=\"line\">    addScriptTag(&apos;http://b.com/main.js?callback=foo&apos;);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">function foo(data) &#123; </span><br><span class=\"line\">    console.log(data.name+&quot;欢迎您&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>采用jsonp跨域也存在问题：</p>\n<ol>\n<li>使用这种方法，只要是个网站都可以拿到b.com里的数据，存在安全性问题。<code>需要网站双方商议基础token的身份验证，这里不详述</code>。</li>\n<li>只能是GET，不能POST。</li>\n<li>可能被注入恶意代码，篡改页面内容，可以采用字符串过滤来规避此问题。</li>\n</ol>\n<h3 id=\"3-CORS\"><a href=\"#3-CORS\" class=\"headerlink\" title=\"3. CORS\"></a>3. CORS</h3><p>​ Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，<code>CORS</code>除了<code>GET</code>要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: *</span><br><span class=\"line\">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class=\"line\">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class=\"line\">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4. window.name+iframe\"></a>4. window.name+iframe</h3><p><code>window.name</code>通过在<code>iframe</code>（一般动态创建）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给<code>window.name</code>。然后，请求者可以检索<code>window.name</code>值作为响应。</p>\n<pre><code>- iframe标签的跨域能力；\n- window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。\n</code></pre><p>每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回<iframe>元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。</iframe></p>\n<h3 id=\"5-window-postMessage\"><a href=\"#5-window-postMessage\" class=\"headerlink\" title=\"5. window.postMessage()\"></a>5. window.postMessage()</h3><p>HTML5新特性，可以用来向其他所有的<code>window</code>对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送<code>MessageEvent</code>，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。</p>\n<h3 id=\"6-修改document-domain跨子域\"><a href=\"#6-修改document-domain跨子域\" class=\"headerlink\" title=\"6. 修改document.domain跨子域\"></a>6. 修改document.domain跨子域</h3><p><strong>前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域</strong></p>\n<p>​ 在根域范围内，允许把domain属性的值设置为它的上一级域。例如，在<code>”aaa.xxx.com”</code>域内，可以把<code>domain</code>设置为<code>“xxx.com”</code>但不能设置为 <code>“xxx.org”</code>或者<code>”com”</code>。</p>\n<p>​ 现在存在两个域名<code>aaa.xxx.com</code>和<code>bbb.xxx.com</code>。在aaa下嵌入bbb的页面，由于其document.name不一致，无法在aaa下操作bbb的js。可以在aaa和bbb下通过js将<code>document.name = &#39;xxx.com&#39;</code>;设置一致，来达到互相访问的作用。</p>\n<h3 id=\"7-websocket\"><a href=\"#7-websocket\" class=\"headerlink\" title=\"7. websocket\"></a>7. websocket</h3><p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时<code>允许跨域通讯</code></p>\n<p><strong>需要注意：</strong>WebSocket对象不支持DOM 2级事件侦听器，必须使用DOM 0级语法分别定义各个事件。</p>\n<h3 id=\"8-代理\"><a href=\"#8-代理\" class=\"headerlink\" title=\"8. 代理\"></a>8. 代理</h3><p>同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题</p>\n<p>DomainA客户端（浏览器） ==&gt; DomainA服务器 ==&gt; DomainB服务器 ==&gt; DomainA客户端（浏览器）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><blockquote>\n<p>基本概念</p>\n</blockquote>\n<h3 id=\"源（origin）就是协议、域名和端口号。\"><a href=\"#源（origin）就是协议、域名和端口号。\" class=\"headerlink\" title=\"源（origin）就是协议、域名和端口号。\"></a>源（origin）就是协议、域名和端口号。</h3><p><a href=\"http://www.company.com:80\" target=\"_blank\" rel=\"noopener\">http://www.company.com:80</a><br>协议：http<br>域名：<a href=\"http://www.company.com\" target=\"_blank\" rel=\"noopener\">www.company.com</a><br>端口号：80</p>\n<h3 id=\"同源策略-1\"><a href=\"#同源策略-1\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。</p>\n<blockquote>\n<p>不受同源策略限制的：</p>\n<ol>\n<li>页面中的链接，重定向以及表单提交是不会受到同源策略限制的。</li>\n<li>跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</code>等。</li>\n</ol>\n</blockquote>\n<h2 id=\"跨域的实现\"><a href=\"#跨域的实现\" class=\"headerlink\" title=\"跨域的实现\"></a>跨域的实现</h2><h3 id=\"1-图片ping或script标签跨域\"><a href=\"#1-图片ping或script标签跨域\" class=\"headerlink\" title=\"1. 图片ping或script标签跨域\"></a>1. 图片ping或script标签跨域</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 图片ping</span><br><span class=\"line\">function imgPing(url) &#123;</span><br><span class=\"line\">    var img = new Image();</span><br><span class=\"line\">    img.src = url;</span><br><span class=\"line\">    img.onload = function () &#123;</span><br><span class=\"line\">        console.log(`img-url:$&#123;url&#125;...success`)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    img.onerror = function () &#123;</span><br><span class=\"line\">        console.error(`img-url:$&#123;url&#125;...faild`)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//script标签跨域</span><br></pre></td></tr></table></figure>\n<p>图片ping常用于跟踪用户点击页面或动态广告曝光次数。<br>script标签可以得到从其他来源数据，这也是JSONP依赖的根据。 </p>\n<blockquote>\n<p>缺点：只能发送Get请求 ，无法访问服务器的响应文本（单向请求）</p>\n</blockquote>\n<h3 id=\"2-JSONP跨域\"><a href=\"#2-JSONP跨域\" class=\"headerlink\" title=\"2. JSONP跨域\"></a>2. JSONP跨域</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addScriptTag(src) &#123; </span><br><span class=\"line\">    var script = document.createElement(&apos;script&apos;); </span><br><span class=\"line\">    script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;); </span><br><span class=\"line\">    script.src = src; </span><br><span class=\"line\">    document.body.appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//window.onload是为了让页面加载完成后再执行</span><br><span class=\"line\">window.onload = function () &#123; </span><br><span class=\"line\">    addScriptTag(&apos;http://b.com/main.js?callback=foo&apos;);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">function foo(data) &#123; </span><br><span class=\"line\">    console.log(data.name+&quot;欢迎您&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>采用jsonp跨域也存在问题：</p>\n<ol>\n<li>使用这种方法，只要是个网站都可以拿到b.com里的数据，存在安全性问题。<code>需要网站双方商议基础token的身份验证，这里不详述</code>。</li>\n<li>只能是GET，不能POST。</li>\n<li>可能被注入恶意代码，篡改页面内容，可以采用字符串过滤来规避此问题。</li>\n</ol>\n<h3 id=\"3-CORS\"><a href=\"#3-CORS\" class=\"headerlink\" title=\"3. CORS\"></a>3. CORS</h3><p>​ Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，<code>CORS</code>除了<code>GET</code>要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: *</span><br><span class=\"line\">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class=\"line\">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class=\"line\">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4. window.name+iframe\"></a>4. window.name+iframe</h3><p><code>window.name</code>通过在<code>iframe</code>（一般动态创建）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给<code>window.name</code>。然后，请求者可以检索<code>window.name</code>值作为响应。</p>\n<pre><code>- iframe标签的跨域能力；\n- window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。\n</code></pre><p>每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回<iframe>元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。</iframe></p>\n<h3 id=\"5-window-postMessage\"><a href=\"#5-window-postMessage\" class=\"headerlink\" title=\"5. window.postMessage()\"></a>5. window.postMessage()</h3><p>HTML5新特性，可以用来向其他所有的<code>window</code>对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送<code>MessageEvent</code>，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。</p>\n<h3 id=\"6-修改document-domain跨子域\"><a href=\"#6-修改document-domain跨子域\" class=\"headerlink\" title=\"6. 修改document.domain跨子域\"></a>6. 修改document.domain跨子域</h3><p><strong>前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域</strong></p>\n<p>​ 在根域范围内，允许把domain属性的值设置为它的上一级域。例如，在<code>”aaa.xxx.com”</code>域内，可以把<code>domain</code>设置为<code>“xxx.com”</code>但不能设置为 <code>“xxx.org”</code>或者<code>”com”</code>。</p>\n<p>​ 现在存在两个域名<code>aaa.xxx.com</code>和<code>bbb.xxx.com</code>。在aaa下嵌入bbb的页面，由于其document.name不一致，无法在aaa下操作bbb的js。可以在aaa和bbb下通过js将<code>document.name = &#39;xxx.com&#39;</code>;设置一致，来达到互相访问的作用。</p>\n<h3 id=\"7-websocket\"><a href=\"#7-websocket\" class=\"headerlink\" title=\"7. websocket\"></a>7. websocket</h3><p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时<code>允许跨域通讯</code></p>\n<p><strong>需要注意：</strong>WebSocket对象不支持DOM 2级事件侦听器，必须使用DOM 0级语法分别定义各个事件。</p>\n<h3 id=\"8-代理\"><a href=\"#8-代理\" class=\"headerlink\" title=\"8. 代理\"></a>8. 代理</h3><p>同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题</p>\n<p>DomainA客户端（浏览器） ==&gt; DomainA服务器 ==&gt; DomainB服务器 ==&gt; DomainA客户端（浏览器）</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjm4gn3zq0006vkjgkul3v8db","tag_id":"cjm4gn3zo0004vkjgret7tydv","_id":"cjm4gn3zs0009vkjg4w0zztqa"},{"post_id":"cjm4gn3zh0000vkjgjta5hvb6","tag_id":"cjm4gn3zo0004vkjgret7tydv","_id":"cjm4gn3zu000cvkjgl26b955i"},{"post_id":"cjm4gn3zh0000vkjgjta5hvb6","tag_id":"cjm4gn3zs0008vkjgerm0nl9m","_id":"cjm4gn3zu000dvkjgh5pp85bm"},{"post_id":"cjm4gn3zh0000vkjgjta5hvb6","tag_id":"cjm4gn3zt000avkjg1nnrbi8t","_id":"cjm4gn3zv000fvkjgjcagj67r"},{"post_id":"cjm4gn3zl0002vkjg7wlu45zh","tag_id":"cjm4gn3zo0004vkjgret7tydv","_id":"cjm4gn3zv000gvkjghlgcgl1n"},{"post_id":"cjm4gn3zp0005vkjg7dxda0b2","tag_id":"cjm4gn3zo0004vkjgret7tydv","_id":"cjm4gn3zv000ivkjg84qt1omb"},{"post_id":"cjm4gn3zr0007vkjgion0mktq","tag_id":"cjm4gn3zv000hvkjgzff6jnar","_id":"cjm4gn3zw000jvkjgi4m49gjx"}],"Tag":[{"name":"JS","_id":"cjm4gn3zo0004vkjgret7tydv"},{"name":"CSS","_id":"cjm4gn3zs0008vkjgerm0nl9m"},{"name":"CSS3","_id":"cjm4gn3zt000avkjg1nnrbi8t"},{"name":"JSS","_id":"cjm4gn3zv000hvkjgzff6jnar"}]}}